[
  
  {
    "title"    : "Jekyll과 Github pages를 사용하여 블로그 만들기",
    "category" : "",
    "tags"     : " Blog, Github, Github pages, Jekyll",
    "url"      : "/2021/11/18/github-pages-with-jekyll.html",
    "date"     : "November 18, 2021",
    "excerpt"  : "Jekyll과 Github pages를 사용하여 간단하게 블로그를 만들어보자\n\n\n\nGitHub Pages\n\n본 문서는 현재 보고 있는 블로그를 구현하였던 내용을 담고 있다.\n\n\n\n시작하게된 계기\n\n문득 개발을 하고 있는데 왜 남는게 없지? 라는 생각이 들기 시작하였다.\n\n요즘엔 양질의 개발자료를 손가락 몇번 놀리면 쉽게 찾을 수 있다보니 정보를 검증도 하지 않고 여과없이 받아들일 수도 있겠다는 생각이 들었고 정보를 내것으로 만들어야겠다는 ...",
  "content"  : "Jekyll과 Github pages를 사용하여 간단하게 블로그를 만들어보자\n\n\n\nGitHub Pages\n\n본 문서는 현재 보고 있는 블로그를 구현하였던 내용을 담고 있다.\n\n\n\n시작하게된 계기\n\n문득 개발을 하고 있는데 왜 남는게 없지? 라는 생각이 들기 시작하였다.\n\n요즘엔 양질의 개발자료를 손가락 몇번 놀리면 쉽게 찾을 수 있다보니 정보를 검증도 하지 않고 여과없이 받아들일 수도 있겠다는 생각이 들었고 정보를 내것으로 만들어야겠다는 필요성이 느껴졌다.\n\n문서를 작성하면서 헷갈리는 부분도 정리할 수 있고 무엇보다 남들에게 설명하도록 나중에 내가 봐도 이해할 수 있도록 작성하려면 확실한 이해가 바탕이 되어야 하기 때문에 시작하게 되었다.\n\n\n\n어떤걸 써야할까\n\n웹개발이라는 것은 익숙하지만 결코 간단한 것이 아니다. (자세히 말하면 public하게 오픈하는 것)\n\n\n  JS, CSS 등의 Frontend 스택을 활용하여 프론트 웹을 개발한다.\n  웹에서 사용할 REST API를 정의 및 개발하고 경우에 따라 DB를 구축한다.\n  Cloud 환경이든 자체 구축 서버든 웹을 빌드하여 올릴 서버가 필요하다.\n  도메인, 인증서 구매 및 적용을 통해 외부에 오픈이 필요하다.\n  추가적으로) 최소한의 보안과 무중단 배포를 위한 proxy 서버가 필요\n\n\n나는\n\n\n  간단한 기술 블로그를 위하여 웹개발을 하기는 싫었다.\n  자체 서버를 구축하기 싫었다. (비용적으로든 노력으로든)\n  추가적인 비용을 들이기 싫었다.\n\n\n따라서 자체 호스팅을 하는 사이트를 이용하는 방법을 선택하였다.\n\n\n\n블로그 플랫폼\n\n조사 결과 여러가지 블로그 플랫폼 서비스들이 존재하였다.\n\n\n  \n    https://velog.io\n\n    \n      \n        개발자를 위한 블로그 서비스(플랫폼)\n      \n      \n        마크다운 작성 가능\n      \n    \n  \n  \n    https://wordpress.org\n\n    \n      \n        전세계적으로 가장 유명한 블로그 서비스\n      \n      \n        커스터마이징 기능이 강력\n      \n      \n        방대한 생태계\n      \n    \n  \n  \n    https://www.tistory.com\n\n    \n      \n        유명한 블로그 플랫폼\n      \n      \n        WYSIWYG 방식의 에디터를 제공\n      \n      \n        특정 환경에서 접속이 매우 느림\n      \n    \n  \n  \n    https://blog.naver.com\n\n    \n      \n        유명한 블로그 플랫폼2\n      \n      \n        WYSIWYG 방식의 에디터를 제공\n      \n      \n        구글 검색이 안되는 치명적인 단점이 있음\n      \n      \n        개발 한정으로 매우 기능이 부실\n      \n    \n  \n  \n    https://pages.github.com\n\n    \n      \n        github과 연동됨\n      \n      \n        markdown 지원\n      \n      \n        퍼블릭 도메인 간편하게 설정 가능\n      \n    \n  \n\n\n결론은?\n\n웹 개발에 공을 들이기는 싫었고 현재 마크다운으로 작성되어 있는 문서들을 쉽게 올릴 수 있어야 하였고 github과 연동되는 Github pages를 사용하기로 하였다.\n\n\n\nJekyll\n\n\n\nhttps://jekyllrb.com/\n\nGitHub 공동 설립자 Tom Preston-Werner에 의해 개발된 Ruby 기반의 정적 사이트 생성기(Static site generator)이다.\n\n여기서 SSG(Static Site Generator)란 DB없이 static file 즉 html만으로 돌아가는 웹을 의미한다.\n\n마크다운 형태로 작성이 가능하여 개발자 freindly하며 구현도 매우 간편하게 할 수 있다.\n\nGithub pages와 궁합이 매우 좋으며 Github pages 공식 문서에서도 Jekyll을 이용하도록 안내하고 있다.\n\n\n\nGithub pages\n\n1. 저장소 생성\n\n\n\nGithub pages는 계정의 github repository를 기반으로 웹을 제공한다.\n\n{사용자명}.github.io 의 형태로 저장소를 생성하면 해당 저장소는 자동으로 github pages 저장소로 설정이 된다.\n\n(올바른 branch에 커밋시 자동으로 github pages를 빌드하도록 설정이 되어있다.)\n\n\n  사진은 이미 저장소를 만들었기 때문에 중복되었다고 나옴\n\n\n2. git 설정\n\n# 유저명은 csupreme19로 가정\n$ mkdir -p ~/git/csupreme19.github.io\n$ cd ~/git/csupreme19.github.io\n# git 사용자 설정\n$ git config --local user.name csupreme19\n$ git config --local user.email csupreme19@gmail.com\n\n# git 로컬 저장소 초기화\n$ git init\n\n# git remote 저장소 연결\n$ git remote add origin git@github.com:csupreme19/csupreme19.github.io.git\n$ git remote -v\norigin\tgit@github.com:csupreme19/csupreme19.github.io.git (fetch)\norigin\tgit@github.com:csupreme19/csupreme19.github.io.git (push)\n\n\n\n  나는 사내 gitlab의 계정이 global로 설정되어 있어 해당 git 저장소에만 config를 적용하도록 --local flag를 사용하였다.\n\n\n3. 테마 설정\n\nhttp://jekyllthemes.org/\n\n위 사이트에서 마음에 드는 테마를 선택 후 github에서 fork 또는 clone한다.\n\n\n  jekyll을 설치 하는 것이 원래 해야 할 일이지만 보통 테마에서 jekyll gemspec 명세를 제공하므로 jekyll 설치를 뒤로하고 테마 설정을 진행한다.\n\n\n\n\n본인은 Type on Strap 테마를 선택하였다.\n\n선택 이유?\n\n\n  현재까지도 유지보수가 되고 있는 점(선택 시점에 10시간 전에 릴리즈된 것을 확인)\n  컨텐츠 중심의 가독성 좋은 테마\n  반응형 웹\n  다크 테마 지원\n  mermaid, katex 등 다이어그램, 수식 툴 지원\n\n\n단점이라면 한글 폰트가 생각보다 크게 보인다는 것인데… 이후 폰트 및 사이즈 변경 예정이다.\n\n\n\nJekyll 설치 및 설정\n\n선행사항\n\n\n  Ruby 2.5.0 이상\n  RubyGems\n  GCC\n  Make\n\n\nRuby 설치(macOS)\n\n# Homebrew 설치\n$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n# Ruby 설치\n$ brew install ruby\n# zsh 사용시\necho &#39;export PATH=&quot;/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/3.0.0/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc\n# bash 사용시\necho &#39;export PATH=&quot;/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/3.0.0/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile\n\n# 버전 확인\n$ ruby -v\n$ gem -v\n$ gcc -v\n\n\n다른 OS 설치 방법은 Jekyll 설치 문서 참조\n\nJekyll 및 테마 설치\n\n$ cd ~/git/csupreme19.github.io\n$ git clone https://github.com/Sylhare/Type-on-Strap.git\n\n# install\n$ gem install jekyll\n$ bundle add webrick\n$ bundle install\n\n# jekyll 로컬 서버 실행\n$ bundle exec jekyll serve\nConfiguration file: /Users/csupreme19/git/csupreme19.github.io/_config.yml\n            Source: /Users/csupreme19/git/csupreme19.github.io\n       Destination: /Users/csupreme19/git/csupreme19.github.io/_site\n Incremental build: disabled. Enable with --incremental\n      Generating...\n       Jekyll Feed: Generating feed for posts\n                    done in 1.461 seconds.\n Auto-regeneration: enabled for &#39;/Users/csupreme19/git/csupreme19.github.io&#39;\n    Server address: http://127.0.0.1:4000/\n  Server running... press ctrl-c to stop.\n\n\n_config.yml 수정\n\n# SITE CONFIGURATION\nbaseurl: &quot;&quot;\t\t# 설정한 url이 subdomain이 된다. 즉 {url}/{baseurl} 도메인으로 접속해야함\nurl: &quot;https://csupreme19.github.io&quot;\t\t# 도메인 주소 설정\n\n# THEME-SPECIFIC CONFIGURATION\ntitle: 내 블로그                             # 타이틀\ndescription: &quot;한글테스트&quot;      # 구글 검색 엔진에서 사용하는 정보\navatar: assets/img/triangle.png                         # 상단 navbar 이미지\nfavicon: assets/favicon.ico                             # 웹 favicon\n\n# Header and footer text\nheader_text: 헤더 텍스트  # 블로그 헤더 텍스트\nheader_feature_image: assets/img/pexels/triangular.jpeg # 헤더 이미지\n# 푸터 텍스트\nfooter_text: &amp;gt;\n  Powered by &amp;lt;a href=&quot;https://jekyllrb.com/&quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt; with &amp;lt;a href=&quot;https://github.com/sylhare/Type-on-Strap&quot;&amp;gt;Type on Strap&amp;lt;/a&amp;gt;\n  \n...\n# 나머지 설정은 github 문서 참조\n\n\n1. 로컬 접속 테스트\n\n\n\nhttp://localhost:4000 접속 확인\n\n2. git push 및 github pages 설정\n\n$ git commit -a -m &quot;initial commit&quot;\n$ git push -u origin main\n\n\n\n\ngithub 저장소 &amp;gt; Settings &amp;gt; Pages\n\n빌드 소스 변경\n\nSource 부분 main 브랜치, / (root) 폴더로 변경\n\n변경 후 Your site is published at https://csupreme19.github.io/ 빌드 성공 메시지 확인\n\n접속\n\nhttps://csupreme19.github.io/ 접속 확인\n\n\n\n댓글창 활성화\n\nType-on-Strap 테마는 3가지의 Comment 오픈소스를 지원한다.\n\n1. Disqus\n\ndisqus.com\n\n장점\n\n\n  로그인 안해도 댓글 달 수 있음\n\n\n단점\n\n\n  무겁다, 무료버전은 광고가 존재\n  개인적인 의견이지만 댓글창이 너저분해보인다.\n\n\n2. Cusdis\n\ncusdis.com\n\n장점\n\n\n  Disqus에 비해 매우 깔끔한 레이아웃\n\n\n단점\n\n\n  중국발이라 왠지 모를 거부감\n  disqus와 마찬가지로 무겁다.\n\n\n3. Utterance\n\nutterance.es\n\n장점\n\n\n  매우 깔끔한 레이아웃\n  성능이 위 2 오픈소스에 비해 좋다.\n  완전 무료 오픈소스로 광고 없음\n\n\n단점\n\n\n  댓글이 repo에 GitHub 이슈로 등록되는 구조라 GitHub 계정이 있어야만 댓글 가능\n\n\nUtterance를 사용하기로 하였다.\n\n일반적인 블로그가 아니라 GitHub Pages로 운영되는 GitHub 기반 블로그이며 주로 개발 내용을 다루기 때문에 GitHub 계정이 필요한 것은 큰 단점으로 다가오지 않았다.\n\n또한 GitHub Issue로 등록되므로 Webhook을 등록하여 Slack 알람을 받는등 Alert 기능도 활성화 가능하다고 생각하였다.\n\n\n\nUtterance 적용하기\n\n\n\n1. Public Repo 생성\n\nGithub pages repo가 public이므로 해당 repo 사용\n\n2. Utterance App 설치\n\nhttps://github.com/apps/utterances에서 설치\n\n3. _config.yml 설정\n\n# Comments\ncomments:\n  utterances:\n    repo: csupreme19/csupreme19.github.io\n    issue-term: comment\n\n\n위 두가지 설정만 하면 설정은 끝난다.\n\n4. 코멘트 적용 확인\n\n$ bundle exec jekyll serve\n\n\n\n\n\n\n폰트 변경\n\n맥 환경에서 봤을땐 폰트가 사이즈 말고는 괜찮았는데 윈도우 환경에서 보니 계단 현상이 존재하고 가독성이 떨어져 보이는 문제가 발생하였다.\n\n테마(템플릿)를 사용하는 이유가 UI 개발에 힘을 쏟기 싫었기 때문인데 어쩔 수 없이 입맛에 맞는 커스텀은 필요한 것 같다.\n\n1. 폰트 .scss 파일 생성\n\n일반 폰트는 케이티의 Y 너만을 비춤체, 소스 코드 폰트는 네이버의 D2 coding ligature를 사용하였다.\n\n$ cd _sass/external\n$ vim _y-spotlight.scss\n$ vim _d2-coding-ligature.scss\n\n\n폰트 배포시 별도의 @font-face 소스를 제공한다.\n\n없다면 기본 구성되어있는 _source-sans-pro.scss 파일을 복사하여 사용하자.\n\n// _y-spotlight.scss\n@font-face {\n    font-family: &#39;Y_Spotlight&#39;;\n    src: url(&#39;https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts-20-12@1.0/Y_Spotlight.woff&#39;) format(&#39;woff&#39;);\n    font-weight: normal;\n    font-style: normal;\n}\n\n// _d2-coding-ligature.scss\n@font-face {\n    font-family: &#39;D2 coding Ligature&#39;;\n    src: url(&#39;https://cdn.jsdelivr.net/gh/everydayminder/assets/subset-D2Codingligature.woff&#39;) format(&#39;woff&#39;);\n    font-weight: 400;\n    font-style: normal;\n}\n\n\n폰트 소스는 cdn을 사용하였는데 D2 coding 폰트의 경우 공식으로 CDN을 제공하고 있지 않는 것 같다.\n\n따라서 everyminder 에서 제공한 woff CDN을 사용하였다.\n\n2. _variables.scss 수정\n\n$ vim _sass/base/_variables.scss\n\n\n_variables.scss 파일에 테마 변수 정보들이 담겨있다.\n\n아래 부분처럼 위에서 추가했던 font-family를 추가한다.\n\n/* TYPOGRAPHY */\n$font-family-main: &#39;Y_Spotlight&#39;, &#39;Source Sans Pro&#39;, Helvetica, Arial, sans-serif;\n$font-family-headings: &#39;Y_Spotlight&#39;, &#39;Source Sans Pro&#39;, Helvetica, Arial, sans-serif;\n$font-family-logo: &#39;Y_Spotlight&#39;, &#39;Source Sans Pro&#39;, Helvetica, Arial, sans-serif;\n$font-size: 0.875em;\n\n$monospace: &#39;D2 coding ligature&#39;, Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, sans-serif !default;\n$font-size-code: 0.85em !default;\n$font-height-code: 1.3em !default;\n$border-radius: 4px !default;\n\n\n하는 김에 글씨 크기가 커서 폰트 사이즈도 조정해 주었다.\n\n3. 확인\n\n\n\n폰트 적용이 된 것을 확인할 수 있다.\n\n\n\nReference\n\n\n  Jekyll Installation\n  GitHub Pages\n  Jekyll Themes\n  Type-on-Strap\n\n\n"
} ,
  
  {
    "title"    : "Kubernetes RBAC Authorization 적용",
    "category" : "",
    "tags"     : " Kubernetes, Authorization, Authentication, RBAC, ABAC, Security",
    "url"      : "/2021/10/01/kubernetes-RBAC-auth.html",
    "date"     : "October 1, 2021",
    "excerpt"  : "Kubernetes RBAC Authorization 적용\n\n본 문서에서는 쿠버네티스 API 서버에 접근하기 위한 4가지 인증 방식을 살펴보고 그 중 RBAC 인증 적용방법에 대하여 정리하였다.\n\n\n\nUsing RBAC Authorization\n\n본 문서에서는 쿠버네티스 API 서버에 접근하기 위한 4가지 인증 방식을 살펴보고 그 중 RBAC 인증 적용방법에 대하여 정리하였다.\n\n\n\n인가(Authentication) vs 인증(Author...",
  "content"  : "Kubernetes RBAC Authorization 적용\n\n본 문서에서는 쿠버네티스 API 서버에 접근하기 위한 4가지 인증 방식을 살펴보고 그 중 RBAC 인증 적용방법에 대하여 정리하였다.\n\n\n\nUsing RBAC Authorization\n\n본 문서에서는 쿠버네티스 API 서버에 접근하기 위한 4가지 인증 방식을 살펴보고 그 중 RBAC 인증 적용방법에 대하여 정리하였다.\n\n\n\n인가(Authentication) vs 인증(Authorization)\n\n\n\n인가(Authentication)\n\n해당 사용자가 누구인지 확인하는 것(회원가입, 로그인)\n\n인증(Authorization)\n\n해당 사용자에 대한 권한을 허락하는 것(호, 자원 접근)\n\n\n\nKubernetes 인증 방식\n\nKubernetes API 서버에 접근하기 위해서는 인증 단계가 필요하다.\n\n쿠버네티스에서는 인증 방식이 크게 4가지가 존재한다.\n\n\n  Node Authorization\n  ABAC Authorization\n  RBAC Authorization\n  Webhook Authorization\n\n\nAPI Server의 --authorization-mode  flag를 확인하여 현재 활성화된 인증 모드를 확인할 수 있다.\n\n$ cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep -i authorization\n    - --authorization-mode=Node,RBAC\n\n\n기본적으로 Node, RBAC 인증 방식이 활성화되어 있는 것을 확인할 수 있다.\n\n\n\nNode Authorization\n\n\nflowchart LR\n  A[User]\n  B[Kube API]\n  C[&quot;KubeletNode&quot;]\n  subgraph Kubernetes Cluster\n    C--Node Authorization--&amp;gt;B\n  end\n    A--&amp;gt;B\n\n\nKubernetes Clsuter에 속하는 Node들은 Kubelet에서 API 서버에 요청할 때 TLS 인증을 이용한다.\n\n이 때 Kubelet의 Group은 system:node에 속해 있으며 해당 그룹에 속해있는 인증 요청은 Node Authorizer에 의하여 인증된다.\n\n이 방식은 보통 Kubernetes TLS 부트스트랩 과정에서 자동으로 설정되므로 더 자세한 내용은 공식 문서 참조\n\n\n\nABAC(Attribute Based Access Control)\n\nJSON 형식의 Policy 정의를 사용하여 해당 사용자를 인증하는 방식\n\nExamples\n\n\nflowchart LR\n  A[User: admin]\n  B[Group: system:authenticated]\n  C[Kube API]\n  subgraph Kuberntes Cluster\n  A--ABAC--&amp;gt;C\n  B--ABAC--&amp;gt;C\n  end\n\n\n{&quot;apiVersion&quot;: &quot;abac.authorization.kubernetes.io/v1beta1&quot;, &quot;kind&quot;: &quot;Policy&quot;, &quot;spec&quot;: {&quot;user&quot;:&quot;admin&quot;,     &quot;namespace&quot;: &quot;*&quot;,              &quot;resource&quot;: &quot;*&quot;,         &quot;apiGroup&quot;: &quot;*&quot;                   }}\n{&quot;apiVersion&quot;: &quot;abac.authorization.kubernetes.io/v1beta1&quot;, &quot;kind&quot;: &quot;Policy&quot;, &quot;spec&quot;: {&quot;group&quot;:&quot;system:authenticated&quot;,  &quot;nonResourcePath&quot;: &quot;*&quot;, &quot;readonly&quot;: true}}\n\n\n기본적으로 비활성화 되어 있으며 kube-apiserver에 --authorization-mode=ABAC, --authorization-policy-file=파일명 설정을 추가하여야 한다.\n\nPoilicy 정의 후 API 서버를 재시작해야하고 접근권한을 파일로 정의하기 때문에 후술할 RBAC에 비하여 관리하기가 어렵다는 단점이 있다.\n\n\n\nRBAC(Role Based Access Control)\n\n사용자, 서비스의 접근 권한(인증)을 Role(ClusterRole)과 RoleBinding(ClusterRoleBinding) 자원에 기반하여 처리하는 방식으로 일반적으로 가장 많이 사용하고 관리하기 쉬운 인증 방식이다.\n\n해당 User, SA(Service Account), Group등이 RoleBinding에 의하여 어떤 접근권한을 가지고 있는지 인증된다.\n\n\nflowchart LR\n  A[User]\n  B[Group]\n    subgraph Kubernetes Cluster\n    C[Service Account]\n  D[Role: Developer]\n  E[Role: Production]\n  end\n  A--RBAC--&amp;gt;D &amp;amp; E\n  B--RBAC--&amp;gt;D\n  C--RBAC--&amp;gt;E\n\n\n\nWebhook Authorization\n\nKubernetes 내부에서 제공하는 인증이 아닌 외부의 인증 정책을 사용하기 위한 방식\n\nOpen Policy Agent와 같은 외부 오픈소스, Admission Controller를 사용할 때 사용한다.\n\n\nflowchart LR\n  A[User]\n    subgraph Kubernetes Cluster\n  B[Kube API]\n    end\n  C[Open Policy Agent]\n  A--&amp;gt;B\n  B--Authorization--&amp;gt;C\n  C-.Authorization.-&amp;gt;B\n\n\n\n\nRBAC 리소스\n\n1. Role / ClusterRole\n\n\nflowchart LR\n  A[RoleCan view PodsCan watch PodsCan list Pods]\n  A\n\n\n어떤 리소스에 어떤 호출이 가능한지 권한/역할을 정의한 리소스이다.\n\nRole과 ClusterRole이 있으며 ClusterRole은 Role과 달리 클러스터 레벨로 가지고 있어 네임스페이스가 존재하지 않는다.\n\nRole 예제\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: pod-reader\nrules:\n- apiGroups: [&quot;&quot;] # &quot;&quot; indicates the core API group\n  resources: [&quot;pods&quot;]\n  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  # &quot;namespace&quot; omitted since ClusterRoles are not namespaced\n  name: secret-reader\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]\n\n\nResources에 해당하는 자원의 verb에 해당하는 요청이 가능하다.\n\npod-reader를 예로 들면 pods를 get, watch, list 요청이 가능하다.\n\nkubernetes의 자원 종류는 아래 명령어로 확인 가능하다.\n\n$ kubectl api-resources\nNAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND\nbindings                                       v1                                     true         Binding\ncomponentstatuses                 cs           v1                                     false        ComponentStatus\nconfigmaps                        cm           v1                                     true         ConfigMap\nendpoints                         ep           v1                                     true         Endpoints\nevents                            ev           v1                                     true         Event\nlimitranges                       limits       v1                                     true         LimitRange\nnamespaces                        ns           v1                                     false        Namespace\nnodes                             no           v1                                     false        Node\npersistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim\npersistentvolumes                 pv           v1                                     false        PersistentVolume\n...\n\n\nRole 확인\n\n$ kubectl get role -n kube-system\n$ kubectl get clusterrole -n\n$ kubectl describe role/kube-proxy -n kube-system\n$ kubectl describe clusterrole/cluster-admin\nName:         cluster-admin\nLabels:       kubernetes.io/bootstrapping=rbac-defaults\nAnnotations:  rbac.authorization.kubernetes.io/autoupdate: true\nPolicyRule:\n  Resources  Non-Resource URLs  Resource Names  Verbs\n  ---------  -----------------  --------------  -----\n  *.*        []                 []              [*]\n             [*]                []              [*]\n\n\n2. ServiceAccount\n\n파드로 올라가있는 서비스에서 kubernetes 클러스터에 접근하기 위한 계정을 나타내는 리소스다.\n\n\n\n\n  이미지: Certified Kubernetes Administrator(CKA) with Practice Tests 발췌\n\n\n쉽게 말해 사용자 계정이 아닌 서비스의 계정이다.\n\n후술할 추상적인 User, Group과 달리 Kubernetes 자원 형태로 실존한다.\n\n\nflowchart LR\n  A[Service Account]\n  B[Secret]\n  A-.token.-B\n\n\nSA 예제\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: monitoring-user\n  namespace: kubernetes-dashboard\n---\n\nSA 확인\n\n$ kubectl get sa -n kube-system\n\n\nservice account 생성시 해당 서비스 어카운트의 토큰을 가지고 있는 secret이 자동 생성된다.\n\n서비스 어카운트 사용방법\n\n$ kubectl describe sa/monitoring-user -n kubernetes-dashboard\nName:                monitoring-user\nNamespace:           kubernetes-dashboard\nLabels:              &amp;lt;none&amp;gt;\nAnnotations:         &amp;lt;none&amp;gt;\nImage pull secrets:  &amp;lt;none&amp;gt;\nMountable secrets:   monitoring-user-token-r6nss\nTokens:              monitoring-user-token-r6nss\nEvents:              &amp;lt;none&amp;gt;\n\n\nservice account 생성시 해당 서비스 어카운트의 토큰을 가지고 있는 secret이 자동 생성된다.\n\n토큰 확인\n\n$ kubectl describe secret monitoring-user-token-r6nss -n kubernetes-dashboard\nName:         monitoring-user-token-r6nss\nNamespace:    kubernetes-dashboard\nLabels:       &amp;lt;none&amp;gt;\nAnnotations:  kubernetes.io/service-account.name: monitoring-user\n              kubernetes.io/service-account.uid: cca1bad1-fe4f-430c-978b-52d7f7ea53c5\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1066 bytes\nnamespace:  20 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlVmM2...\n\n# 참고) 한번에 토큰 조회\n$ kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/monitoring-user -o jsonpath=&quot;{.secrets[0].name}&quot;) -o go-template=&quot;&quot;\neyJhbGciOiJSUzI1NiIsImtpZCI6IlVmM2...\n\n\nAPI 호출시 Authorization 헤더에 해당 토큰을 넣어서 요청하면 인증을 할 수 있다.\n\n자원에 적용\n\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - name: dashboard-metrics-scraper\n          image: kubernetesui/metrics-scraper:v1.0.6\n          ...\n      serviceAccountName: kubernetes-dashboard\t# 해당 부분 추가\n      ...\n\n\nPod 명세 serviceAccountName 에 위에서 생성한 SA 추가하면 해당 Pod는 API Server에 정의된 권한을 가지고 접근할 수 있다.\n\n요청 예시\n\n# 직접 호출시 토큰 명시\n$ curl -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1...&quot; -ivk https://10.213.196.211:6443 \n\n\n3. RoleBinding\n\n위에서 생성한 ServiceAccount가 실질적으로 권한을 가지려면 해당 어카운트가 어느 자원에 접근할 수 있는지 허락하는 단계가 필요하다.\n\n이것을 인증(Authorization)이라고 한다.\n\nkubernetes에서는 RBAC, 즉 Role 역할을 기반으로하여 인증을 하기 때문에 Role을 ServiceAccount / User / Group에 바인딩하는 방법을 사용하며 이를 나타내기 위한 리소스가 RoleBinding이다.\n\nRoleBinding과 ClusterRoleBinding이 있으며 ClusterRole의 경우 ClusterRoleBinding을 이용한다.\n\n각각의 Role은 ServiceAccount, User, Group에 바인딩 될 수 있다.\n\nUser / Group\n\nServiceAccount와 달리 Kubernetes API server의 User와 Group은 별도로 정의된 Kubernetes Resource가 아니다.\n\nAPI server에 접근하기 위한 아래와 같은 보안 설정 파일에 정의되어 있는 User와 Group이라는 추상적인 개념이다.\n\n\n  Static Password file\n  Static Token file\n  Certificates\n\n\n보통은 인증서 설정에 User와 Group 정보가 정의되어 있으며 system:  으로 시작하는 그룹은 미리 정의된 그룹이다.\n\nUser 정보는 kubeconfig에서 확인할 수 있다.\n\n$ kubectl config view\n\n\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: DATA+OMITTED\n    server: https://10.213.196.211:6443\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: kubernetes-admin\n  name: kubernetes-admin@kubernetes\ncurrent-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: kubernetes-admin\n  user:\n    client-certificate-data: REDACTED\n    client-key-data: REDACTED\n\n\n\nflowchart LR\n  A[User]\n  B[Group]\n  C[Service Account]\n  D[Role]\n  E[Secret]\n  subgraph RoleBinding\n  A &amp;amp; B &amp;amp; C---D\n  end\n  C -.token.- E\n\n\nRoleBinding 예제\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-pods\n  namespace: default\nsubjects:\n- kind: User\n  name: jane\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: monitoring-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-monitoring\nsubjects:\n- kind: ServiceAccount\n  name: monitoring-user\n  namespace: kubernetes-dashboard\n---\n\n\n  ClusterRoleBinding 역시 클러스터 레벨이므로 네임스페이스가 따로 없음\n\n\nRoleBinding 확인\n\n$ kubectl get rolebinding\n$ kubectl get clusterrolebinding\n$ kubectl get pods --as jane\t# User 권한 확인\n\n\n\nRBAC 사용 예시\n\n\n  시나리오: k8s dashboard에 접근하기 위한 모니터링 인증을 생성한다.\n\n\n\n  kubernetes-dashboard-rbac.yaml 작성\n\n\nServiceAccount, ClusterRole, ClusterRoleBinding을 설정한다.\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: monitoring-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cluster-monitoring\nrules:\n- apiGroups: [&quot;*&quot;]\n  resources: [&quot;namespaces&quot;, &quot;deployments&quot;, &quot;replicasets&quot;, &quot;pods&quot;, &quot;pods/log&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: monitoring-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-monitoring\nsubjects:\n- kind: ServiceAccount\n  name: monitoring-user\n  namespace: kubernetes-dashboard\n\n\nCluster의 자원이 아닌 헬스체크등 URI로 API를 호출해야하는 경우 아래와 같이 resources 대신 nonResourceURLs를 사용한다.\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cluster-monitoring\nrules:\n- nonResourceURLs: [&quot;/healthz*&quot;, &quot;/livez*&quot;, &quot;/readyz*&quot;, &quot;/version*&quot;]\n  verbs: [&quot;get&quot;]\n\n\n해당 ClusterRole을 가진 SA의 시크릿 토큰을 이용하여 위 URL에 해당하는 API를 호출할 수 있다.\n\n\n  Token 확인\n    $ kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/monitoring-user -o jsonpath=&quot;{.secrets[0].name}&quot;) -o go-template=&quot;&quot;\n    \n  \n  Kubernetes 클러스터 접근 테스트\n\n\n$ curl -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1...&quot; -k https://10.213.196.211:6443/livez\\?verbose\n[+]ping ok\n[+]log ok\n[+]etcd ok\n[+]poststarthook/start-kube-apiserver-admission-initializer ok\n[+]poststarthook/generic-apiserver-start-informers ok\n[+]poststarthook/priority-and-fairness-config-consumer ok\n[+]poststarthook/priority-and-fairness-filter ok\n[+]poststarthook/start-apiextensions-informers ok\n[+]poststarthook/start-apiextensions-controllers ok\n[+]poststarthook/crd-informer-synced ok\n[+]poststarthook/bootstrap-controller ok\n[+]poststarthook/rbac/bootstrap-roles ok\n[+]poststarthook/scheduling/bootstrap-system-priority-classes ok\n[+]poststarthook/priority-and-fairness-config-producer ok\n[+]poststarthook/start-cluster-authentication-info-controller ok\n[+]poststarthook/aggregator-reload-proxy-client-cert ok\n[+]poststarthook/start-kube-aggregator-informers ok\n[+]poststarthook/apiservice-registration-controller ok\n[+]poststarthook/apiservice-status-available-controller ok\n[+]poststarthook/kube-apiserver-autoregistration ok\n[+]autoregister-completion ok\n[+]poststarthook/apiservice-openapi-controller ok\nlivez check passed\n\n# 참고) 실패시\n{\n  &quot;kind&quot;: &quot;Status&quot;,\n  &quot;apiVersion&quot;: &quot;v1&quot;,\n  &quot;metadata&quot;: {\n  },\n  &quot;status&quot;: &quot;Failure&quot;,\n  &quot;message&quot;: &quot;Unauthorized&quot;,\n  &quot;reason&quot;: &quot;Unauthorized&quot;,\n  &quot;code&quot;: 401\n}\n\n\n\n\n요약\n\nKubernetes API 서버에 접근하기 위한 인증방식은 크게 4가지가 있다.\n\n\n  Node\n  ABAC\n  RBAC\n  Webhook\n\n\n일반적으로 사용하는 인증 방식으로는 RBAC가 있으며 Role에 기반하여 인증하는 방식이다.\n\n전체적인 구조를 보자면 아래와 같다. (ClusterRole도 동일)\n\n\nflowchart LR\n  A[User]\n  B[Group]\n  C[Service Account]\n  D[Role]\n  subgraph Kubernetes Cluster\n  E[Secret]\n  J[Pod]\n  F[Kube API]\n  RoleBinding\n  end\n  subgraph RoleBinding\n  A &amp;amp; B &amp;amp; C---D\n  end\n  C -.token.- E\n  C --&amp;gt; J\n  J --Request--&amp;gt; F\n  F -.Response.-&amp;gt; J\n\n\n\n\nReference\n\n\n  Using RBAC Authorization\n  Using Node Authorization\n  Using ABAC Authorization\n  Certified Kubernetes Administrator(CKA) with Practice Tests\n\n"
} ,
  
  {
    "title"    : "SonarQube 설정 및 트러블슈팅",
    "category" : "",
    "tags"     : " Sonarqube, Jenkins, Webhook, Ingress, Kubernetes, GitLab",
    "url"      : "/2021/05/10/sonarqube-config.html",
    "date"     : "May 10, 2021",
    "excerpt"  : "SonarQube 설정 및 트러블슈팅\n\n\n\nSonarQube Documentation\n\n본 문서에서는 Sonarqube Jenkins 연동, GitLab 연동, Ingress 인증서 설정, 웹훅 설정 등 내용을 모아 정리하였으며\n\n설정시 오류를 해결했던 내역을(트러블슈팅) 정리하였다.\n\n\nSonarQube 설정\n\nIngress SSL 인증서 적용\n1. k8s Secret 생성\n\n\n  k8s secret 생성은 Kubernetes ingre...",
  "content"  : "SonarQube 설정 및 트러블슈팅\n\n\n\nSonarQube Documentation\n\n본 문서에서는 Sonarqube Jenkins 연동, GitLab 연동, Ingress 인증서 설정, 웹훅 설정 등 내용을 모아 정리하였으며\n\n설정시 오류를 해결했던 내역을(트러블슈팅) 정리하였다.\n\n\nSonarQube 설정\n\nIngress SSL 인증서 적용\n1. k8s Secret 생성\n\n\n  k8s secret 생성은 Kubernetes ingress nginx https 인증서 적용 참조\n\n\n2. Ingress 리소스 설정\n\n$ vim sonarqube-ingress.yaml\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\n metadata:\n   name: sonarqube\n   namespace: default\n   annotations:\n     kubernetes.io/ingress.class: &quot;nginx&quot;\n     nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;\n     nginx.ingress.kubernetes.io/force-ssl-redirect: &quot;false&quot;\n     nginx.ingress.kubernetes.io/proxy-body-size: &quot;20M&quot;\t\t// 20M 초과시 HTTP 413 방지하기 위하여\n spec:\n   rules:\n   - host: sonarqube.ccpinfra.xyz # 추가\n     http:\t# -(하이픈) 제거\n       paths:\n       - pathType: Prefix\n         path: &quot;/sonarqube&quot;\n         backend:\n           service:\n             name: sonarqube-sonarqube\n             port:\n               number: 9000\n   tls:\t# tls 이하 부분 모두 추가\n   - hosts:\n     - sonarqube.yourdomain.com # 등록한 도메인명 입력\n     secretName: secret-tls # k8s secret 리소스명 입력\n\n$ kubectl apply -f sonarqube-ingress.yaml\n\n\n\n  Nginx Ingress Controller 사용하였다.\nIngress HTTP, HTTPS(/sonarqube) -&amp;gt; sonarqube 서비스(9000)\n\n  \n    tls 설정에 도메인 입력시 IP 주소로는 Ingress 동작하지 않음\n  \n\n\n3. 인증서 적용 확인\n\n\n\n도메인 접속 및 확인\n\n\n  Jenkins의 SonarQube Server 설정 값에 기존의 IP주소로 되어있는 경우 도메인 주소로 변경 필요(http)\n\n\n\nJenkins Webhook 설정\n\nSonarQube가 검사를 끝낸 뒤 성공/실패 여부를 전달하기 위하여 SonarQube에 Jenkins로의 Webhook이 설정되어 있어야함\n\n\n\n1. SonarQube 대시보드 로그인\n\n2. Administration &amp;gt; Configuration &amp;gt; Webhooks\n\n3. Create\n\n\n  Name: 원하는 이름(jenkins-webhook)\n  URL: jenkins 주소 (http 사용할 것)\n  Secret: (선택)\n\n\n4. 빌드시 웹훅 동작 여부를 이 페이지에서 실시간으로 확인 가능\n\n\nJenkins 파이프라인 - JavaScript, TypeScript 연동\n\nJavaScript는 기본적으로 브라우저 위에서 실행되는 언어이기 때문에 이를 실행할 수 있는 프레임워크인 NodeJS가 젠킨스에 필요하다.\n\n1. NodeJS 플러그인 설치\n\n\n  Jenkins 관리 &amp;gt; 플러그인 관리 &amp;gt; 설치가능 &amp;gt; nodejs 검색\n  재시작 없이 설치하기(업데이트, 디펜던시 추가 등으로 재시작 필요시 재시작 후 설치하기)\n\n\n\n\n2. NodeJS Tools 설정\n\n\n  Jenkins 관리 &amp;gt; Global Tool Configuration\n  NodeJS &amp;gt; NodeJS installations…\n  nodejs installer 정보 입력\n    \n      Name: 원하는 이름(nodejs)\n      Install automatically: 체크\n      Install from nodejs.org\n      Version: NodeJS 14.17.0 (원하는 버전 but latest LTS 버전인 14버전 권장)\n    \n  \n  저장\n\n\n3. 적용할 pipeline에 nodejs tool 환경 추가\n\nnode (&#39;jenkins-slave&#39;){\n    ...\n    env.NODEJS_HOME = &quot;${tool &#39;nodejs&#39;}&quot;\t// 2-3 항목에서 입력한 nodejs installer 이름\n    env.PATH=&quot;${env.NODEJS_HOME}/bin:${env.PATH}&quot;\n    sh &#39;npm --version&#39;\n    ...\n\n위와같이 설정해주면 jenkins-slave에서 node, npm 명령어 사용 가능\n\n4. sonar property 추가\n\nsonarqube {\n       properties {\n                property &quot;sonar.sources&quot;, &quot;src/main&quot;\n                property &quot;sonar.tests&quot;, &quot;src/test&quot;\n       }\n}\n\n\n  위 코드는 gradle 프로젝트 build.gradle 파일 기준\n\n\n소나큐브 검증시 기본적으로 java 경로만 잡는 경우\n\nsonar.sources = src/main, sonar.tests = src/test 등으로 경로를 지정해주어야 JS 코드도 검사 가능\n\n\nSonarQube for Maven 설정\n\nMaven의 경우 설치형이기 때문에 별도로 dependency 설정이 필요하지 않다.\n\nsonar-maven-plugin을 저장소에서 가져와서 바로 실행한다.\n\n    stage(&quot;SonarQube analysis&quot;) {\n        withSonarQubeEnv(&#39;sonarqube server&#39;) {\n            sh &#39;mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar&#39;\n        }\n    }\n\n    stage(&quot;Quality Gate&quot;){\n        timeout(time: 1, unit: &#39;HOURS&#39;) {\n            def qg = waitForQualityGate()\n            if (qg.status != &#39;OK&#39;) {\n                error &quot;Pipeline aborted due to quality gate failure: ${qg.status}&quot;\n            }\n        }\n    }\n\n\n\nSonarQube for Gradle 설정\n\nGradle 프로젝트의 경우 보통 gradlew의 wrapper 형태로 제공되는 경우가 대부분이다.\n\n따라서 sonarqube 플러그인을 프로젝트의 build.gradle dependency에 추가해주어야한다.\n\n아래 부분 프로젝트의 build.gradle에 추가\n\n# plugin 부분 추가\n\tplugin {\n    \tid &#39;org.sonarqube&#39; version &#39;3.0&#39;\n    }\n# 또는\n    buildscript {\n        repositories {\n            jcenter()\n        }\n        dependencies {\n            classpath(&quot;org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0&quot;)\n        }\n    }\n    \n\tapply plugin: &#39;org.sonarqube&#39;\n\n\n# repository 추가\n\trepositories {   \t\n\t\tjcenter()\n\t}\n    \n# sonarqube 프로퍼티 추가\n    sonarqube {\n\t\tproperties {\n\t\t\tproperty &quot;sonar.sources&quot;, &quot;src/main&quot;\n\t\t}\n\t}\n    \n# multi module project의 경우\n# 아래와 같이 검사할 모듈명 명시 후 안에 적용\nproject(&quot;:makers-web&quot;) {\n\tapply plugin: &#39;org.sonarqube&#39;\n\n\tsonarqube {\n\t\tproperties {\n\t\t\tproperty &quot;sonar.sources&quot;, &quot;src/main&quot;\n\t\t}\n\t}\n}\n# 또는 전체 적용시\nsubprojects {\n\tapply plugin: &#39;org.sonarqube&#39;\n\n\tsonarqube {\n\t\tproperties {\n\t\t\tproperty &quot;sonar.sources&quot;, &quot;src/main&quot;\n\t\t}\n\t}\n}\n\n\n\n빌드시 sonarqube gradle plugin 다운로드 및 검사 확인\n\n\nSonarQube Quality Profiles 적용\n\n기본적으로 각 언어별 Sonar way라는 Default Profile이 적용되어 있음\n\n\n\n\n  sonarqube 대시보드 로그인\n  (선택) Quality Profiles &amp;gt; Create 또는 Java Sonar way 프로필 설정 &amp;gt; Copy\n    \n      Name: 원하는 이름\n      Language: 원하는 언어\n      Parent: none\n    \n  \n  새로 생성한 Profile 설정 &amp;gt; Set as Default\n  설정 &amp;gt; Activate More Rules에서 추가로 적용할 Rule 탐색\n  Activate 클릭하여 적용\n\n\n\nSonarQube GitLab 계정/그룹 연동\n\nSonarQube 로그인시 GitLab OAuth2를 사용하여 gitlab 계정 연동을 할 수 있다.\n\n1. GitLab 사이드\n\n  GitLab OAuth2 Application 등록\n    \n      Admin Area &amp;gt; Applications &amp;gt; New application\n      New application 입력\n        \n          Name: 원하는 어플리케이션 이름 입력(GitLab SonarQube)\n          Redirect URI: ${sonarqube-uri}/oauth2/callback/gitlab 입력 (public URL이어야한다.)\n          Trusted: 현재 등록하는 어플리케이션을 신뢰할 것인지? 체크\n          Confidential: Client Secret을 암호화통신할 것인지? 체크\n          Scopes: api 체크(gitlab oauth2 api 사용권한)\n        \n      \n      Submit 후 앱 정보 확인\n      Application ID, Secret 복사\n    \n  \n\n\n2. SonarQube 사이드\n\n\n\n\n  Server Base URL 설정\n    \n      Administration &amp;gt; Configuration &amp;gt; General Settings\n      Server base URL 입력\n        \n          외부 연동시 기본적으로 public 통신이기 때문에 public url 입력\n            \n              https://sonarqube.yourdomain.com/sonarqube\n            \n          \n        \n      \n      Save\n    \n  \n  ALM Integration 설정\n    \n      Administration &amp;gt; Configuration &amp;gt; ALM Integrations &amp;gt; GitLab\n      GitLab Authentication 항목 입력\n        \n          Enabled: true\n          GitLab URL: public gitlab URL 입력(https://gitlab.yourdomain.com)\n          Application ID, Secret: 1-4에서 복사한 항목 각각 입력\n          Allow users to sign-up: gitlab oauth2로 처음 로그인하는 사용자를 sonarqube에 등록할 것인지? 체크\n          Synchronize user groups: 소나큐브에 gitlab 그룹명과 일치하는 그룹이 생성되어 있다면 유저를 자동으로 등록한다. 체크\n        \n      \n    \n  \n  Java caCerts 인증서 설정(Kubernetes TLS Secret)\n    \n      Java에서는 https 통신시 기본적으로 java keystore에 인증서를 요구한다.위에서 public 경로를 http로 설정하였으면 상관 없으나 https로 설정한 경우 진행\n\n      현재 Java 기반 서비스들은 Kubernetes 환경에 떠있으므로 해당 환경으로 진행\n    \n    \n      기존 k8s에 kubernetes.io/tls 타입으로 떠있는 tls 타입 시크릿은 사용불가하므로 opaque 타입(기본타입) secret을 생성한다.\n      sonarqube-secret.yaml 생성\n         \t$ vim sonarqube-secret.yaml\n        \n        apiVersion: v1\nkind: Secret\nmetadata:\n  name: sonarqube-secret\ndata:\n  cert-1.crt: MIIFIzCC... # .crt(X.509 포맷)의 인증서값\n        \n        $ kubectl apply -f sonarqube-secret.yaml\n        \n      \n      helm values.yaml 수정\n        $ vim values.yaml\n        \n        ...\n caCerts:\n   image: adoptopenjdk/openjdk11:alpine\n   enabled: true\n   secret: sonarqube-secret\n...\n        \n        # helm upgrade\n$ helm upgrade sonarqube oteemocharts/sonarqube -f values.yaml\n        \n      \n    \n  \n  테스트\n    \n      로그아웃 후 메인페이지에 들어가면 아래 이미지와 같이 Log in with GitLab 버튼 생성 확인\n \n      버튼 누르면 GitLab에 로그인되어 있는 경우 자동으로 소나큐브 사용자 생성 및 연동이 완료된다.\n      gitlab 그룹명과 일치하는 그룹을 미리 생성해 놓으면 로그인시 해당 유저 그룹 자동 연동\n    \n  \n\n\n\nSonarQube 배지\n\n\n\n각 프로젝트 대시보드 &amp;gt; 우상단 Project Information\n\nmarkdown 형태로 실시간 정보 배지를 embed 가능\n\n대신 해당 배지를 사용하려면 SonarQube 프로젝트가 Public으로 설정되어야하며 이는 소스 취약점을 외부에서 누구나 볼 수 있다는 것을 의미한다.\n\n\nTroubleshooting\n\n1. 분석 권한 없음\n\n[ERROR] Error during SonarScanner execution\n[ERROR] You&#39;re not authorized to run analysis. Please contact the project administrator.\n\n\n빌드 후 검증 수행시 위와 같은 오류가 날 때\n\nSonarQube 플러그인 설치 및 실행은 완료되었으나 Jenkins - SonarQube 연동 계정이 Analysis 실행 권한이 없는 경우이다.\n\n\n\n\n  SonarQube 대시보드 로그인(관리자 계정 필요)\n  Administration &amp;gt; Security &amp;gt; Global Permissions\n  연동된 유저가 속한 그룹 혹은 유저 자체에 Execute Analysis 권한 체크\n\n\n2. class 파일 없음\n\n[ERROR] Failed to execute goal org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar (default-cli) on project sample-project: Your project contains .java files, please provide compiled classes with sonar.java.binaries property, or exclude them from the analysis with sonar.exclusions property. -&amp;gt; [Help 1]\n\n\npipeline 또는 job 실행 순서에 빌드 이전에 분석을 시도하고 있는지 체크할 것.\n\nJava의 경우 sonarqube는 신뢰도를 높이기 위하여 .java 파일만으로 코드 분석을 하지 않고 .java와 .class 파일을 함께 분석한다고 한다.\n\n\n  https://docs.sonarqube.org/latest/analysis/languages/java/#header-2 참조\n\n\n따라서 컴파일된 .class 파일이 있어야하므로 maven 또는 gradle 플러그인을 사용하여야함.\n\n만약 없을 경우, 수동으로 컴파일하여 .class 파일을 넣어줘야함.\n\n3. 소스 분석시 HTTP 413 REQUEST ENTITY TOO LARGE\n\n소스 분석시 HTTP 413 REQUEST ENTITY TOO LARGE가 나오는 경우\n\n검증할 소스가 sonarqube의 max body size(기본값: 20m)를 초과하여 나오는 경우로\n\n아래와 같이 sonarqube-ingress.yaml에 proxy body size 설정\n\n...\n   apiVersion: networking.k8s.io/v1\n   kind: Ingress\n    metadata:\n      name: sonarqube\n      namespace: default\n      annotations:\n        kubernetes.io/ingress.class: &quot;nginx&quot;\n        nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;\n        nginx.ingress.kubernetes.io/force-ssl-redirect: &quot;false&quot;\n        nginx.ingress.kubernetes.io/proxy-body-size: &quot;20M&quot;\t\t// 20M 초과시 HTTP 413 방지하기 위하여\n...\n\n\n\n\nReference\n\n\n  SonarScanner for Jenkins\n  SonarQube Scanner for Jenkins\n  SonarQube GitLab Integration\n\n"
} ,
  
  {
    "title"    : "SonarQube 설치 및 Jenkins pipeline 연동하기",
    "category" : "",
    "tags"     : " Sonarqube, Jenkins, Helm, Docker, Docker-Compose",
    "url"      : "/2021/05/07/sonarqube-jenkins.html",
    "date"     : "May 7, 2021",
    "excerpt"  : "SonarQube 설치 및 Jenkins pipeline 연동하기\n\n\n\nSonarQube Documentation\n\n본 문서에서는 Sonarqube 설치 및 Jenkins 파이프라인 연동한 내용을 정리하였다.\n\n\nSonarQube란\n\n\n\n소스 품질 관리를 위한 자동화된 정적 코드 검증/분석 툴\n\n  버그 탐색\n  취약점 탐색\n  코드 냄새(Code Smell) 탐색\n  보안 핫스팟 탐색\n\n\n안전(Safe) 하고 깨끗한(Clean) 코드를 ...",
  "content"  : "SonarQube 설치 및 Jenkins pipeline 연동하기\n\n\n\nSonarQube Documentation\n\n본 문서에서는 Sonarqube 설치 및 Jenkins 파이프라인 연동한 내용을 정리하였다.\n\n\nSonarQube란\n\n\n\n소스 품질 관리를 위한 자동화된 정적 코드 검증/분석 툴\n\n  버그 탐색\n  취약점 탐색\n  코드 냄새(Code Smell) 탐색\n  보안 핫스팟 탐색\n\n\n안전(Safe) 하고 깨끗한(Clean) 코드를 유지하게끔 도움을 줌(소스코드 품질 관리)\n\n\n  커밋/머지(SCM)\n  체크아웃, 빌드, 테스트(CI/CD)\n  분석/검증(SonarQube)\n\n\n\n  Sonarlint: 코딩/컴파일시 소스 품질 관리를 위한 IDE 플러그인\n\n\n\nSonarQube 설치\n\n두 가지 방법으로 설치해 보았다.\n\n\n  Using Helm Chart\n    \n      k8s 위에서 관리하는 자원의 형태로 사용시\n    \n  \n  Using Docker Compose\n    \n      호스트 위에서 컨테이너형으로 간단하게 사용시\n    \n  \n\n\nUsing Helm Chart\n\n\n  k8s helm을 이용하여 설치하는 방법\n\n\n1. Helm 설치\n\n# Ubuntu\n$ curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -\n$ sudo apt-get install apt-transport-https --yes\n$ echo &quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\n$ sudo apt-get update\n$ sudo apt-get install helm\n\n\n2. Helm Chart values.yaml 가져오기\n\n   # helm 저장소 추가\n   $ helm repo add oteemocharts https://oteemo.github.io/charts\n   $ wget https://raw.githubusercontent.com/Oteemo/charts/master/charts/sonarqube/values.yaml\n\n\n\n  현시점 기준 8.5.1-community\n\n\n3. ingress 리소스 설정\n\n   $ vim sonarqube-ingress.yaml\n\n   apiVersion: networking.k8s.io/v1\n   kind: Ingress\n    metadata:\n      name: sonarqube\n      namespace: default\n      annotations:\n        kubernetes.io/ingress.class: &quot;nginx&quot;\n        nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;\n        nginx.ingress.kubernetes.io/force-ssl-redirect: &quot;false&quot;\n    spec:\n      rules:\n      - http:\n          paths:\n          - pathType: Prefix\n            path: &quot;/sonarqube&quot;\n            backend:\n              service:\n                name: sonarqube-sonarqube\n                port:\n                  number: 9000\n\n   $ kubectl apply -f sonarqube-ingress.yaml\n\n\n  /sonarqube context로 설정\n\n  \n    Ingress HTTP(/sonarqube) -&amp;gt; sonarqube 서비스(9000)\n  \n\n\n4. PersistenceVolume, PersistenceVolumeClaim 설정\n\n   $ vim sonarqube-storage.yaml\n\n    kind: PersistentVolume\n    apiVersion: v1\n    metadata:\n      name: sonarqube-pv-volume\n    spec:\n      storageClassName: manual\n      capacity:\n        storage: 25Gi\n      accessModes:\n        - ReadWriteMany\n      hostPath:\n        path: &quot;/nfs_nas/volumes/sonarqube/data&quot;\n    ---\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n      name: sonarqube-pv-claim\n    spec:\n      storageClassName: manual\n      accessModes:\n        - ReadWriteMany\n      resources:\n        requests:\n          storage: 25Gi\n    ---\n    kind: PersistentVolume\n    apiVersion: v1\n    metadata:\n      name: sonarqube-db-pv-volume\n    spec:\n      storageClassName: manual\n      capacity:\n        storage: 25Gi\n      accessModes:\n        - ReadWriteMany\n      hostPath:\n        path: &quot;/nfs_nas/volumes/sonarqube/postgres&quot;\n    ---\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n      name: sonarqube-db-pv-claim\n    spec:\n      storageClassName: manual\n      accessModes:\n        - ReadWriteMany\n      resources:\n        requests:\n          storage: 25G\n\n   $ kubectl apply -f sonarqube-storage.yaml\n\n\nsonarqube에서 사용할 volume을 지정해주기 위하여 설정\n\n용량과 hostPath는 사용 환경에 맞추어 변경할 것\n\n5. values.yaml 수정\n\n아래 해당하는 부분 모두 수정\n\n    ...\n    readinessProbe:\n      initialDelaySeconds: 60\n      periodSeconds: 30\n      failureThreshold: 6\n      sonarWebContext: /sonarqube/ # 변경(끝에 &#39;/&#39; 포함)\n    livenessProbe:\n      initialDelaySeconds: 60\n      periodSeconds: 30\n      sonarWebContext: /sonarqube/ # 변경(끝에 &#39;/&#39; 포함)\n    ...\n    # 사용할 플러그인 추가(아래 기본 플러그인은 이미 있으므로 충돌남 외부 플러그인만 적용할 것, 아래는 잘못된 예시)\n    plugins:\n      install: [\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-java-plugin/sonar-java-plugin-6.9.0.23563.jar&quot;,\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-javascript-plugin/sonar-javascript-plugin-7.4.3.15529.jar&quot;,\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-xml-plugin/sonar-xml-plugin-2.2.0.2973.jar&quot;,\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-css-plugin/sonar-css-plugin-1.4.2.2002.jar&quot;,\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-html-plugin/sonar-html-plugin-3.4.0.2754.jar&quot;,\n        &quot;https://binaries.sonarsource.com/Distribution/sonar-typescript-plugin/sonar-typescript-plugin-2.1.0.4359.jar&quot;\n        ]\n      lib: []\n    ...\n    env:\n      - name: SONAR_WEB_CONTEXT # 추가\n        value: /sonarqube\n    ...\n    persistence:\n      enabled: true\n      annotations: {}\n      existingClaim: sonarqube-pv-claim # 추가\n    ...\n    postgresql:\n      enabled: true\n      ...\n      persistence:\n        enabled: true\n        existingClaim: sonarqube-db-pv-claim # 추가\n    ...\n\n\n6. helm install\n   # helm v3\n   # helm install [name] [chart] [-f:value]\n   $ helm install sonarqube oteemocharts/sonarqube -f values.yaml\n   \n   # helm v2\n   # helm install [--name:name] [chart] [-f:values]\n   $ helm install --name sonarqube oteemocharts/sonarqube -f values.yaml\n\n\n참고\n\nhelm uninstall\n\n   # helm v3\n   # helm uninstall [name]\n   $ helm uninstall sonarqube\n   \n   # helm v2\n   # helm del [--purge] [name]\n   $ helm del --purge sonarqube\n\n\nhelm upgrade\n\n   # helm upgrade [release] [chart] [-f:values]\n   $ helm upgrade sonarqube oteemocharts/sonarqube -f values.yaml\n\n\n7. kubernetes pods 확인 및 대시보드 접속\n   $ kubectl get pods -A | grep sonarqube\n   $ kubectl logs [pod name]\n   $ curl localhost:9000\n\n\n  http://external-ip:port/sonarqube 접속 확인초기 계정: admin/admin\n\n  접속 후 admin 비밀번호 변경 또는 비활성화 할 것\n\n\nUsing Docker-Compose\n\n1. docker-compose.yaml 작성\n    version: &quot;3.1&quot;\n    services:\n      sonarqube:\n        image: sonarqube:latest\n        restart: always\n        depends_on:\n          - sonarqube-db\n        container_name: sonarqube\n        ports:\n          - &quot;9000:9000&quot;\n        networks:\n          - sonarnet\n        environment:\n          TZ: Asia/Seoul\n          SONAR_HOME: /opt/sonarqube\n          SONAR_JDBC_USERNAME: sonar\n          SONAR_JDBC_PASSWORD: sonar\n          SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar\n        ulimits:\n          nofile:\n            soft: 65536\n            hard: 65536\n          memlock:\n            soft: -1\n            hard: -1\n        volumes:\n          - /nfs_nas/volumes/sonarqube/data:/opt/sonarqube/data\n          - /nfs_nas/volumes/sonarqube/extensions:/opt/sonarqube/extensions\n          - /nfs_nas/volumes/sonarqube/logs:/opt/sonarqube/logs\n          - /nfs_nas/volumes/sonarqube/temp:/opt/sonarqube/temp\n\n      sonarqube-db:\n        image: postgres\n        container_name: sonarqube-db\n        networks:\n          - sonarnet\n        environment:\n          TZ: Asia/Seoul\n          POSTGRES_USER: sonar\n          POSTGRES_PASSWORD: sonar\n        volumes:\n          - /nfs_nas/volumes/sonarqube/postgres:/var/lib/postgresqli/data\n\n\n2. docker-compose 실행 및 접속 확인\n   $ docker-compose up -d\n   $ docker-compose ps\n   $ curl localhost:9000\n\n\n\n  외부 접속의 경우 포트포워딩 필요\n\n  \n    이 부분은 각 인프라의 환경별로 상이하기 때문에 별도로 기술하지는 않는다.\n  \n\n\n\n\nJenkins 연동\n\n1. SonarQube 사이드\n\n\n  SonarQube Web 접속\n  Administration &amp;gt; Security &amp;gt; Users\n  (선택) admin 계정 deactivate 및 새 관리자 계정 설정\n    \n      admin 계정의 설정 &amp;gt; Deactivate\n      Create User\n      생성된 계정의 Groups 리스트 &amp;gt; Unselected &amp;gt; sonar-administrators 체크\n    \n  \n  위의 관리자 계정에서 Token 메뉴 진입\n  Generate Tokens &amp;gt; Token Name(jenkins-token) 입력 후 Generate\n    \n      SonarQube 입장에서는 Jenkins에서 사용할 토큰이므로 jenkins-token이라고 이름 지음\n    \n  \n\n\n\n\n\n  생성된 토큰 복사\n    \n      토큰값은 생성시에만 볼 수 있으므로 필히 복사 및 다른 곳에 저장할 것\n    \n  \n\n\n2. Jenkins 사이드\n\n\n  SonarQube 플러그인 설치\n    \n      Jenkins 관리 &amp;gt; 플러그인 관리\n      SonarQube 검색 &amp;gt; SonarQube Scanner for Jenkins 설치\n    \n  \n  SonarQube 토큰 등록\n    \n      Jenkins 관리 &amp;gt; Manage Credentials\n      아래 Stores scoped to Jenkins의 Domains 항목 클릭\n      Add Credentials\n        \n          Kind: Secret text\n          Scope: Global\n          Secret: 위 SonarQube에서 생성했던 토큰 붙여넣기\n          ID: 원하는 ID(sonarqube-token) 입력\n        \n      \n    \n  \n  SonarQube 서버 연동\n    \n      Jenkins 관리 &amp;gt; 시스템 설정 &amp;gt; SonarQube servers\n      Environment variables 체크\n        \n          SonarQube servers 항목에 입력하는 config 정보들을 Jenkins에서 환경변수로 사용할 것인지 확인하는 항목\n        \n      \n    \n\n    \n  \n  SonarQube Installations 항목 입력\n    \n      Name: 원하는 서버 이름 입력(ex: sonarqube server)\n      Server URL: SonarQube 서버 주소 입력\n      Server authentication token: 2번 항목에서 생성한 토큰 선택\n    \n  \n\n\n3. Jenkins Pipeline\n\n테스트용 메이븐 프로젝트 기준으로 작성\n\nGradle 프로젝트 또는 다른 설정을 보려면 SonarQube for Gradle을 참조\n\nSonarQube와 연동할 파이프라인 스크립트에 아래와 같이 Stage 추가\n\n    stage(&quot;SonarQube analysis&quot;) {\n        withSonarQubeEnv(&#39;sonarqube server&#39;) {\n            sh &#39;mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar&#39;\n        }\n    }\n\n    stage(&quot;Quality Gate&quot;){\n        timeout(time: 1, unit: &#39;HOURS&#39;) {\n            def qg = waitForQualityGate()\n            if (qg.status != &#39;OK&#39;) {\n                error &quot;Pipeline aborted due to quality gate failure: ${qg.status}&quot;\n            }\n        }\n    }\n\n\nStage 설명\n\n  \n    &quot;SonarQube analysis&quot;: mvn 빌드 파일 기준 SonarQube 검사 진행\n  \n  \n    &quot;Quality Gate&quot;: 검사한 코드의 품질을 통해 통과/미통과 판별(Quality Gate 프로파일 설정은 SonarQube에서 진행)\n  \n\n\n\n  withSonarEnv()에는 위의 설정에서 Jenkins에서 설정한 SonarQube Server 이름으로 설정해야함Qulaity Gate의 경우 SonarQube에서 Jenkins로 Webhook이 설정되어 있어야함 (Webhook 설정 참조)\n\n\n\n\nJenkins 빌드시 각 Stage 정상 통과 및 SonarQube Webhook 동작 여부 확인\n\n\n  연동 성공시 Build History에 SonarQube 대시보드로 이동할 수 있는 아이콘이 나옴\n\n\n\n\nReference\n\n\n  SonarScanner for Jenkins\n  SonarQube Scanner for Jenkins\n\n"
} ,
  
  {
    "title"    : "Dark Mode",
    "category" : "",
    "tags"     : " Katex, Markdown",
    "url"      : "/2021/04/27/dark-mode.html",
    "date"     : "April 27, 2021",
    "excerpt"  : "More colors with less light.\n\nClick the half-moon most top-right button to turn the lights on/off.\n\nHeaders\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nHeaders with links\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nCode highlight\nMode specific code high...",
  "content"  : "More colors with less light.\n\nClick the half-moon most top-right button to turn the lights on/off.\n\nHeaders\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nHeaders with links\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nCode highlight\nMode specific code highlighting themes. Kramdown which is responsible for the color highlighting may be more limited than your IDE.\n\n#!/usr/bin/env python\n&quot;&quot;&quot;\nTest file for syntax\n&quot;&quot;&quot;\n# TODO: Use dark mode\nfrom sys import os\n\ndef foo(bar): \n    try:\n        print(bar)\n    except NameError:\n        print(&quot;Variable bar is not defined&quot;)\n\n\nclass Bar(object): \n    def __init__(self):\n        foo(1)\n        self.octal = &#39;\\04&#39;\n        self.text = &quot;&quot;&quot;Example \\t\\n&quot;&quot;&quot;\n    \n    def __exit__(self, *args):\n        print(&#39;exit\\u1111\\xFF&#39;)\n        pass\n    \n    @staticmethod\n    def example():\n        assert (1.0 and 2L) or True\n        return { &quot;example&quot;: [(1,), (r&#39;raw&#39;, u&#39;unicode&#39;)]}\n\n\nTables\n\n\n  \n    \n      hex\n      dec\n      oct\n    \n  \n  \n    \n      0\n      0\n      0\n    \n    \n      5\n      5\n      5\n    \n    \n      A\n      10\n      12\n    \n    \n      F\n      16\n      20\n    \n    \n      F5\n      21\n      25\n    \n  \n\n\nKaTeX\n\nSome KaTeX diagrams to check in dark mode:\n\n\\[\\begin{CD}\nA @&amp;gt;a&amp;gt;&amp;gt; B \\\\\n@VbVV @AAcA \\\\\nC @= D\n\\end{CD}\\]\n\n\\[\\utilde{AB}\\]\n"
} ,
  
  {
    "title"    : "Sample post",
    "category" : "",
    "tags"     : " A Tag, Katex",
    "url"      : "/2019/06/30/sample-post.html",
    "date"     : "June 30, 2019",
    "excerpt"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tinci...",
  "content"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. \n\nDonec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.\n\n\n  Consectetur adipiscing elit\n  Donec a diam lectus\n  Sed sit amet ipsum mauris\n\n\nUt turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n\nNunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum.\n\n\n    \n    \n        \n    \n    \n\n\nUt dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.\n\n\n  Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque\n\n\nEtiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.\n\n\\[\\Theta \\ne \\Gamma\\]\n\nPhasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci1. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.\n\n\n  \n    \n\n      John Smith, A Title About Citations &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Color Post",
    "category" : "",
    "tags"     : " Test, Color",
    "url"      : "/2019/05/18/color-post.html",
    "date"     : "May 18, 2019",
    "excerpt"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.\n\nYou can go fork and star HardCandy-Jekyll too! 😉\n\n\n\nHow does i...",
  "content"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.\n\nYou can go fork and star HardCandy-Jekyll too! 😉\n\n\n\nHow does it work?\n\nBasically you need to add just one thing, the color:\n\n---\nlayout: post\ntitle: Color Post\ncolor: brown\n---\n\n\nIt can either be a html color like brown (which look like red to me). Or with the rgb:\n\n---\nlayout: post\ntitle: Color Post\ncolor: rgb(165,42,42)\n---\n\n\nThe background used is lineart.png from xukimseven you can edit it in the config file. \nIf you want another one, put it in /assets/img as well.\n\n\n  ⚠️ It’s a bit hacking the css in the post.html\n\n"
} ,
  
  {
    "title"    : "Bootstrap",
    "category" : "",
    "tags"     : " Test",
    "url"      : "/2017/09/17/Use-Bootstrap.html",
    "date"     : "September 17, 2017",
    "excerpt"  : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.\nHere is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.\n\nUse bootstrap\n\nAdd some custom Bootstrap in the cu...",
  "content"  : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.\nHere is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.\n\nUse bootstrap\n\nAdd some custom Bootstrap in the custom layout!\n\n\n\nSnippet example\n\nIf you are new to Bootstrap you can  always check the documentation.\nHere is an example from startbootstrap.com.\n\n\n\n\n  \n    \n      \n        \n        \n          \n            Project One\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Two\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Three\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Four\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Five\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Six\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n  \n  \n\n\n\n\nMix it with Markdown\n\nAll the above was custom HTML with Bootstrap.\nYou can also mix it up with some markdown.\n\nYou can use the bootstrap’s build in javascript API to control your event.\nHere is a code snippet for the documentation:\n\n$(&#39;#myModal&#39;).on(&#39;show.bs.modal&#39;, function (e) {\n    if (!data) return e.preventDefault() // stops modal from being shown\n})\n\n\nThat’s just for demo though, you would need to properly integrate your javascript in your page.\nUsually you would put any custom javascript script in the assets folder under js and reference it in your page from there.\n\nSo try it out using the bootstrap: true flag! 😉\n"
} ,
  
  {
    "title"    : "Feature images",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2014/11/29/feature-images.html",
    "date"     : "November 29, 2014",
    "excerpt"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and i...",
  "content"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and is shown with the title on permalink pages:\n\nfeature-img: &quot;assets/img/feature-img/desk-messy.jpeg&quot;\nthumbnail: &quot;assets/img/thumbnails/feature-img/desk-messy.jpeg&quot; \n\n\nYou can also use a thumbnail, a smaller version of the same image to improve loading of the page.\nThe thumbnail will also be used when you share your article on other platform (linkedin, whatsapp, facebook, …).\n\n\n  \n    And now it is working\n  \n\n\nYou can also add images aligned in your post using the aligner include.\nMake sure to separate all of the image path from in a string separated with ,.\nIt by default look into assets/img/ so give the path from there, example:\n\n{% include aligner.html images=&quot;pexels/book-glass.jpeg,triangle.png&quot; %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nHere you have two images side by side, but you can set more and set the amount per columns \n(by specifying the number of columns or let it be automatic using &quot;auto&quot;):\n\n{% include aligner.html images=&quot;portfolio/cabin.png,portfolio/cake.png,portfolio/circus.png&quot; column=3 %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nit also works with only one images, it is made to display it smaller than normally.\nHowever you can just use the Markdown way of doing it to get the image normal sized and centered.\n\n# Markdown way (bigger)\n![Travel]({{ &quot;/assets/img/pexels/computer.jpeg&quot; | relative_url}})\n# Aligner with only One (50% of width)\n{% include aligner.html images=&quot;pexels/computer.jpeg&quot; %}\n\n\n    \n    \n        \n    \n    \n\n\n"
} ,
  
  {
    "title"    : "Markdown and HTML",
    "category" : "",
    "tags"     : " Katex, Markdown",
    "url"      : "/2014/11/28/markdown-and-html.html",
    "date"     : "November 28, 2014",
    "excerpt"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also bee...",
  "content"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also been extended from Markdown:\n\n\n  \n    \n      First Header\n      Second Header\n    \n  \n  \n    \n      Content Cell\n      Content Cell\n    \n    \n      Content Cell\n      Content Cell\n    \n  \n\n\nHere’s an example of an image, which is included using Markdown:\n\n\n\nThis is another example of list:\n\n\n  list of things\n    \n      Sub list\n      of Other things\n      with numbers\n    \n  \n  And many more\n    \n      Sub sub list\n        \n          can go on …\n            \n              and on …\n                \n                  and on !\n                \n              \n            \n          \n        \n      \n      That’s it.\n    \n  \n\n\nOther subtitle\n\nHighlighting for code in Jekyll is done using Base16 or Rouge. This theme makes use of Rouge by default.\n\n// count to ten\nfor (var i = 1; i &amp;lt;= 10; i++) {\n    console.log(i);\n}\n\n// count to twenty\nvar j = 0;\nwhile (j &amp;lt; 20) {\n    j++;\n    console.log(j);\n}\n\nMath\n\nType on Strap uses KaTeX to display maths. Equations such as \\(S_n = a \\times \\frac{1-r^n}{1-r}\\) can be displayed inline.\n\nAlternatively, they can be shown on a new line:\n\n\\[f(x) = \\int \\frac{2x^2+4x+6}{x-2}\\]\n\n"
} ,
  
  {
    "title"    : "What&#39;s your title",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2014/11/27/whats-your-title.html",
    "date"     : "November 27, 2014",
    "excerpt"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is...",
  "content"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is how the yaml looks inside the post:\n\ntitle: What&#39;s your title\nhide_title: true\nfeature-img: assets/img/feature-img/story.jpeg\nauthor: mhagnumdw\ntags: [Test, Lorem]\n\n\nYou may wonder, why is there a title when you are not actually displaying it. \nWell that’s due to some jekyll limitation:\n\n\n  You can’t set the title to the empty string\n\n\nThe title is used elsewhere than inside the post, for example in the blog page that list this post.\nAn empty title would break those pages and possibly prevents jekyll to render your blog.\n"
} ,
  
  {
    "title"    : "The Real Lorem Ipsum",
    "category" : "",
    "tags"     : " Image, Color",
    "url"      : "/2014/11/26/lorem-ipsum.html",
    "date"     : "November 26, 2014",
    "excerpt"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolo...",
  "content"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.”\n\nSection 1.10.32\n\nLatin\n“Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?”\n\nTranslation by H. Rackham (1914)\n“But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?”\n\nSection 1.10.33\n\nLatin\n\n“At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.”\n\nTranslation by H. Rackham (1914)\n\n“On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.”\n\n"
} ,
  
  {
    "title"    : "Markup: Syntax Highlighting",
    "category" : "",
    "tags"     : " Highlight, Markdown",
    "url"      : "/2014/08/08/Markup-Syntax-Highlighting.html",
    "date"     : "August 8, 2014",
    "excerpt"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavo...",
  "content"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.\n\n#container {\n  float: left;\n  margin: 0 -240px 0 0;\n  width: 100%;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n.highlight {\n  margin: 0;\n  padding: 1em;\n  font-family: $monospace;\n  font-size: $type-size-7;\n  line-height: 1.8;\n}\n\n\n&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;\n  {% if page.previous %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;\n  {% endif %}\n  {% if page.next %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;\n  {% endif %}\n&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;\n\n\nmodule Jekyll\n  class TagIndex &amp;lt; Page\n    def initialize(site, base, dir, tag)\n      @site = site\n      @base = base\n      @dir = dir\n      @name = &#39;index.html&#39;\n      self.process(@name)\n      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)\n      self.data[&#39;tag&#39;] = tag\n      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;\n      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;&amp;amp;#8211;&#39;\n      self.data[&#39;title&#39;] = &quot;#{tag_title_prefix}#{tag}&quot;\n      self.data[&#39;description&#39;] = &quot;An archive of posts tagged #{tag}.&quot;\n    end\n  end\nend\n\n\nCode Blocks in Lists\n\nIndentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4.\n\n\n  Do step 1.\n  \n    Now do this:\n\n    def print_hi(name)\n  puts &quot;Hi, #{name}&quot;\nend\nprint_hi(&#39;Tom&#39;)\n#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.\n    \n  \n  Now you can do this.\n\n\nGitHub Gist Embed\n\nAn example of a Gist embed below:\n\n\n\nYou can use defer=true so that the loading of the gist doesn’t prevent the loading of the page.\n\n   &amp;lt;script defer=true \n           src=&quot;https://gist.github.com/sylhare/dad7ed1ef3d13614c77c4ebadf8a11c3.js&quot;&amp;gt;\n   &amp;lt;/script&amp;gt;\n\n\n  \n    \n\n      Michael’s Rose, Minimal Mistakes &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Generate a table of content",
    "category" : "",
    "tags"     : " Kramdown, Customization",
    "url"      : "/2013/12/12/Generate-a-table-of-content.html",
    "date"     : "December 12, 2013",
    "excerpt"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasi...",
  "content"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasic Usage\n\nYou need to put this at the beginning of the page where you want the table of content to be displayed\n\n* TOC\n{:toc}\n\n\nIt will then render the markdown and html titles (lines that begins with # or using the &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; tages)\n\nUsing toc.js\n\nDemo display of jekyll-table-of-contents by ghiculescu.\n\n\n\n\nCustomize with toc.js\n\ntoc.js stands for table of content, it is a js plugin that generates automatically a table of content of a post.\n\nUse with this jekyll template\n\nIf you want to customize the theme it is up to you, you can add the toc.js file into the asset &amp;gt; js and add it into the page.html layout with:\n\n&amp;lt;script src=&quot;/assets/js/toc.js&quot; &amp;gt;&amp;lt;/script&amp;gt;\n\nThen you can use it as it is said on the repository.\n\nBasic Usage\n\nThe script requires jQuery. First, reference toc.js in templates where you would like to add the table of content. Then, create an HTML element wherever you want your table of contents to appear:\n\n&amp;lt;div id=&quot;toc&quot;&amp;gt;&amp;lt;/div&amp;gt;\n\n\nThen you put your post with titles and all like:\n\n## Title\n## Mid title 1\nThis is text on page one\n## Mid title 2\nThis is text for page two\n### Sub title 2.a\nSome more text\n\n\nThen at the end of your post, you call the .toc() function using:\n\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n$(document).ready(function() {\n    $(&#39;#toc&#39;).toc();\n});\n&amp;lt;/script&amp;gt;\n\n\nHow it would look like\n\nSo you can get a feel of it.\n\n\n\n\n\n\n\n\n"
} ,
  
  {
    "title"    : "Tech Stuff example",
    "category" : "",
    "tags"     : " Mermaid, Highlight, Markdown",
    "url"      : "/2013/11/02/Tech-stuff-example.html",
    "date"     : "November 2, 2013",
    "excerpt"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good-looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; ope...",
  "content"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good-looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; open-falcon/agent/config/cfg.json\n\n\nOr try searching for partial of a command, like this article should be returned when looking for “find grep”\n\nfind /etc -type f -exec cat &#39;{}&#39; \\; | tr -c &#39;.[:digit:]&#39; &#39;\\n&#39; | grep &#39;^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$&#39;\n\n\nCode highlighting examples\n\nBecause you might put code in your blog post, and you want to make sure it will look good in here. Plus that the search\nfunction will still be working!\n\nJava\n\njava example\n\nimport java.util.*;\n\n@Example\npublic class Demo {\n  private static final String CONSTANT = &quot;String&quot;;\n  private Object o;\n  /**\n   * Creates a new demo.\n   * @param o The object to demonstrate.\n   */\n  public Demo(Object o) {\n    this.o = o;\n    String s = CONSTANT + &quot;Other example of text&quot;;\n    int i = 123 - 33 % 11;\n  }\n  public static void main(String[] args) {\n    Demo demo = new Demo();\n    System.out.println(demo.o.toString())\n  }\n}\n\n\nJavascript\n\n/**\n * Does a thing\n */\nfunction helloWorld(param1, param2) {\n    var something = {\n        key: &quot;value&quot;,\n        number: 1\n    };\n\n    // Do something\n    if (2.0 % 2 == something) {\n        console.log(&#39;Hello, world!&#39;);\n    } else {\n        return null;\n    }\n\n    // @TODO comment\n}\n\n\nJSON\n\n  {\n  &quot;animals&quot;: {\n    &quot;tiger&quot;: {\n      &quot;name&quot;: &quot;tiger&quot;,\n      &quot;images&quot;: [&quot;🐯&quot;, &quot;🐅&quot;, &quot;⻁&quot;]\n    },\n    &quot;turtle&quot;: {\n      &quot;age&quot;: 126,\n      &quot;image&quot;: &quot;🐢&quot;\n    },\n    &quot;unicorn&quot;: {\n      &quot;doesExist&quot;: true,\n      &quot;image&quot;: &quot;🦄&quot;\n    }\n  }\n}\n\n\nPython\n\nimport os\n\n\ndef some_function(param_one=&quot;&quot;, param_two=0):\n    r&#39;&#39;&#39;A docstring&#39;&#39;&#39;\n    if param_one &amp;gt; param_two:  # interesting\n        print(&quot;Greater&quot;)\n    return (param_two - param_one + 1 + 0b10) or None\n\n\nclass SomeClass:\n    &quot;&quot;&quot; dunno what I am doing &quot;&quot;&quot;\n\n    def __init__(self):\n        pass\n\n\nYAML\n\nYou can also render some yaml, like this _config.yml:\n\n\n# Welcome to Jekyll!\n#\n# This config file is meant for settings that affect your whole blog, values\n# which you are expected to set up once and rarely edit after that. If you find\n# yourself editing this file very often, consider using Jekyll&#39;s data files\n# feature for the data you need to update frequently.\n#\n# This file, &quot;_config.yml&quot; is *NOT* reloaded automatically when you use\n# &#39;bundle exec jekyll serve&#39;. If you change this file, please restart the server process.\n\n# Site settings\n# These are used to personalize your new site. If you look in the HTML files,\n# you will see them accessed via Seunghoon Choi, , and so on.\n# You can create any custom variable you would like, and they will be accessible\n# in the templates via .\n\n# SITE CONFIGURATION\nbaseurl: &quot;/Type-on-Strap&quot;\nurl: &quot;https://sylhare.github.io&quot;\n\n# THEME-SPECIFIC CONFIGURATION\ntitle: Type on Strap                                    # site&#39;s title\ndescription: &quot;A website with blog posts and pages&quot;      # used by search engines\navatar: assets/img/triangle.png                         # Empty for no avatar in navbar\nfavicon: assets/favicon.ico                             # Icon displayed in the tab\n\nremote_theme: sylhare/Type-on-Strap                     # If using as a remote_theme in github\n\n\nMermaid\n\nDiagrams with mermaid, make sure it is enabled in the _config.yml.\nHere is a simple example:\n\n&amp;lt;!-- To generate a diagram --&amp;gt;\n&amp;lt;div class=&quot;mermaid&quot;&amp;gt;\nsequenceDiagram\n    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?\n    John--&amp;gt;&amp;gt;Alice: Great!\n&amp;lt;/div&amp;gt;\n\n\nThat will be rendered into this:\n\n\n    \n    \n        \n    \n    \n\n\ndYou can also go with more complex features and diagrams from the documentation:\n\n▶ More complex diagram\n\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-&amp;gt;&amp;gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts prevail!\n    John--&amp;gt;&amp;gt;Alice: Great!\n    John-&amp;gt;&amp;gt;Bob: How about you?\n    Bob--&amp;gt;&amp;gt;John: Jolly good!\n\n\n"
} ,
  
  {
    "title"    : "Blogging with title ",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2013/10/18/blogging-with-title.html",
    "date"     : "October 18, 2013",
    "excerpt"  : "I am a BIG title\n\nThis is a very tiny tiny post with less than 250 letters.\n\n",
  "content"  : "I am a BIG title\n\nThis is a very tiny tiny post with less than 250 letters.\n\n"
} 
  
  ,
  
  {
  
  "title"    : "Ninja",
  "category" : "",
  "tags"     : " Lorem",
  "url"      : "/portfolio/ninja",
  "date"     : "April 8, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Creative",
  "category" : "",
  "tags"     : " Ipsum",
  "url"      : "/portfolio/safe",
  "date"     : "August 16, 2014",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Circus",
  "category" : "",
  "tags"     : " Ipsum",
  "url"      : "/portfolio/circus",
  "date"     : "September 1, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Tower of Hanoi",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/hanoi",
  "date"     : "September 1, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Tic tac toe",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/tictactoe",
  "date"     : "September 1, 2014",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n\n"
  
} ,
  
  {
  
  "title"    : "Cake",
  "category" : "",
  "tags"     : " Lorem, Ipsum",
  "url"      : "/portfolio/cake",
  "date"     : "September 27, 2015",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Jekyll",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/jekyllblog",
  "date"     : "May 26, 2017",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Lorem Ipsum",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/submarine",
  "date"     : "September 3, 2017",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Github",
  "category" : "",
  "tags"     : " Lorem",
  "url"      : "/portfolio/gitlecture",
  "date"     : "October 20, 2017",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} 
  
]
