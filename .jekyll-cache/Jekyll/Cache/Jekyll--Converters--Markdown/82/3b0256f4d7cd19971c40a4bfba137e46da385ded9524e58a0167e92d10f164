I"x?<h1 id="postgresql-wal-아카이브-백업">PostgreSQL WAL 아카이브 백업</h1>

<p><img src="/assets/img/titles/postgresql-logo.svg" alt="postgresql-logo.svg" /></p>

<p><a href="https://www.postgresql.org/docs/14/continuous-archiving.html">Continuous Archiving</a></p>

<p>WAL(Write Ahead Log) 파일을 아카이브(백업)하고 이를 이용하여 복구하는 백업 방법</p>

<hr />

<h2 id="wal-archiving">WAL Archiving</h2>

<p>PostgreSQL은 발생하는 모든 트랜잭션을 pg_wal/이라는 폴더에 미리쓰기로그 write ahead log(WAL) 파일로 저장한다.</p>

<p>데이터베이스의 모든 트랜잭션들에 대한 로그를 가지고 있기 때문에 postgres 장애 발생시 해당 WAL을 읽어서 복구할 수 있음</p>

<p>해당 로그를 다른 서버로 보내서 다른 서버를 동일하게 복구 가능하며 특정시점까지만 복구를 진행하여 특정시점으로 복구 가능</p>

<p>SQL dump, file system 백업보다 복잡하지만 장점이 있다.</p>

<h3 id="wal-segment-files">WAL segment files</h3>

<p><strong>저장위치: <code class="language-plaintext highlighter-rouge">pg_wal/</code></strong></p>

<p>WAL 시퀀스를 나누어 저장한 파일(보통 16MB 단위)</p>

<p>파일명은 시퀀스 위치와 WAL 시퀀스를 나타낸다.</p>

<p>WAL 아카이빙을 사용하지 않으면 몇개의 세그먼트만 재활용하면서 생성됨 
따라서 WAL 데이터를 아카이브하려면 WAL 세그먼트 파일을 다른 곳에 저장해야한다.</p>

<p>파일을 다른곳에 저장하는 방법은 따로 있는 것이 아니라 아무 방법이나 사용 가능
(NFS 저장, 테이프 저장장치 기록, CD 굽기 등등)</p>

<hr />
<h3 id="wal-archiving-활성화">WAL Archiving 활성화</h3>

<p><code class="language-plaintext highlighter-rouge">postgresql.conf</code> 설정파일 수정</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">wal_level</code> 값을 <code class="language-plaintext highlighter-rouge">replica</code> 이상으로 설정(<code class="language-plaintext highlighter-rouge">replica</code> or <code class="language-plaintext highlighter-rouge">logical</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">archive_mode</code> <code class="language-plaintext highlighter-rouge">on</code></li>
  <li><code class="language-plaintext highlighter-rouge">archive_command</code>에 명령어 지정
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># 예시</span>
  archive_command <span class="o">=</span> <span class="s1">'test ! -f /mnt/server/archivedir/%f &amp;&amp; cp %p /mnt/server/archivedir/%f'</span> <span class="c"># %p: 아카이브 폴더, %f: 아카이브할 파일명</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">archive_command</code> 명령어는 아카이빙 시점에 실행되는 커맨드</p>

<p>아카이브 커맨드 실행 결과가 0이어야 성공</p>

<p>0이 리턴되면 PostgreSQL은 아카이브가 성공인 것으로 간주하고 해당 파일을 지우거나 재사용함</p>

<p>설정값을 적용하려면 postgres restart 필요</p>

<h4 id="유의사항">유의사항</h4>

<ul>
  <li>아카이빙시 overwrite 안하도록 설정 overwrite 수행시 0이 리턴되지 않음</li>
  <li>
    <p>아카이브 커맨드 성공 결과 꼭 확인할 것</p>

    <blockquote>
      <p>(<code class="language-plaintext highlighter-rouge">pg_wal/</code> 용량이 가득차게 되면 PostgreSQL이 PANIC shutdown됨)</p>
    </blockquote>
  </li>
  <li><code class="language-plaintext highlighter-rouge">postgresql.conf</code>, <code class="language-plaintext highlighter-rouge">pg_hba.conf</code>, <code class="language-plaintext highlighter-rouge">pg_ident.conf</code> 등과 같은 설정 파일은 백업하지 않음</li>
  <li>아카이브 단위는 WAL segment</li>
</ul>

<h4 id="기타-설정">기타 설정</h4>

<p><code class="language-plaintext highlighter-rouge">archive_timeout</code></p>

<p>WAL segment가 완성되지 않아도 시간이 지나면 segment 생성하도록 설정 가능, 하지만 segment당 용량은 똑같으므로 짧은 archive timeout 설정은 권장하지 않는다.</p>

<p><code class="language-plaintext highlighter-rouge">pg_switch_wal</code></p>

<p>강제로 세그먼트를 완성시키고 다음 세그먼트를 시작한다.</p>

<p>설정 후 <code class="language-plaintext highlighter-rouge">postgresql.conf</code> 적용하려면 서버 재시작</p>

<hr />
<h2 id="base-backup-생성">Base Backup 생성</h2>
<h3 id="pg_basebackup-툴-사용"><code class="language-plaintext highlighter-rouge">pg_basebackup</code> 툴 사용</h3>

<p>pgdata 파일을 일반 파일 형태 혹은 tar 아카이브로 백업 파일을 생성</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>su - postgres
<span class="nv">$ </span>/usr/bin/pg_basebackup <span class="nt">-D</span> /var/lib/postgresql/data/basebackup <span class="nt">-v</span> <span class="nt">-Ft</span> <span class="nt">-z</span> <span class="nt">-P</span> <span class="nt">-X</span> stream
</code></pre></div></div>

<p>basebackup 수행시 output 폴더는 빈 폴더 혹은 없는 폴더여야한다.</p>

<p>basebackup 정상 수행 후 0000000100001234000055CD.007C9330.backup과 같은 파일이 생성된다.
({pg_wal}.{exact position}.backup)</p>

<p>이는 백업 시점에서의 pg_wal을 새로 생성하기 위함이다.</p>

<p><strong>Base backup 이후 시점부터 WAL을 이용한 데이터 복구가 가능</strong></p>

<p>.backup 파일 이후의 wal 파일을 이용하여 복구하면됨.</p>

<blockquote>
  <p>Base backup 수행시 퍼포먼스에 큰 영향은 없으나 <code class="language-plaintext highlighter-rouge">full_page_writes</code>가 disabled 되어 있다면 속도가 느릴 수 있다.</p>
</blockquote>

<h4 id="base-backup-history">Base backup history</h4>

<p>Base backup 수행시 백업 이력 파일을 생성</p>

<p>파일명: <code class="language-plaintext highlighter-rouge">백업 시점에 있던 WAL segment의 파일명.위치.backup</code></p>

<p>이전 시점의 WAL segment는 복구에 사용되지 않으므로 지워도 무관</p>

<p>Base backup 수행 후 다음 Base backup 수행 시점까지의 WAL 파일들이 저장되므로 용량과 의도하는 백업 주기에 맞춰서 base backup 수행 주기 설정할 것</p>

<h3 id="low-level-api-사용">Low Level API 사용</h3>

<p><code class="language-plaintext highlighter-rouge">pg_basebackup</code> 툴을 사용하지 않고 API 사용하여 백업하는 방법</p>

<p>non-exclusive한 방법과 exclusive한 방법이 있다.</p>

<blockquote>
  <p>exclusive 방법은 postgresql 9.6 이후로 deprecated 되었으므로 non-exclusive만 작성</p>
</blockquote>

<h4 id="non-exclusive-low-level-backup">Non-Exclusive Low-Level Backup</h4>

<p>다른 백업이 수행 중에도 백업 동시 수행 가능(pg_basebackup, Low-Level API)</p>

<ol>
  <li>WAL 아카이빙이 활성화되고 작동되는지 확인</li>
  <li>postgres 서버 접속(접속 db는 상관없다). 사용자는 크게 상관 없으나 아래 커맨드를 실행하는 권한이 있어야 한다. (e.g., superuser인 postgres)</li>
</ol>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">pg_start_backup</span><span class="p">(</span><span class="s1">'label'</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">'label'</code>: 백업을 구분할 레이블</li>
  <li>
    <p>두번째 <code class="language-plaintext highlighter-rouge">false</code>: <code class="language-plaintext highlighter-rouge">checkpoint_completion_target</code> 설정으로 체크포인트 간격을 반으로 줄여 I/O 사용량을 줄인다.</p>

    <blockquote>
      <p>만약 속도가 매우 느리다면 true로 설정하여 빠르게 할 수 있으나 DB 퍼포먼스에 영향 줄 가능성도 있음</p>
    </blockquote>
  </li>
  <li>세번째 <code class="language-plaintext highlighter-rouge">false</code>: exclusive 백업 여부</li>
</ul>

<ol>
  <li>tar와 cpio 같은 파일시스템 백업 툴을 이용하여 data 디렉토리 백업 진행
 아래 Backing Up The Data Directory 참고</li>
  <li>위 명령어 수행한 같은 커넥션에서 아래 쿼리 실행
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_stop_backup</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>백업모드를 중지하는 명령어로 다음 WAL segment로 스위치 진행(standby 서버에서는 수동으로 진행해줘야함)</p>
  </li>
  <li>백업 시점에 존재하던 WAL 세그먼트가 아카이브되었다면 끝.</li>
</ol>

<h4 id="backing-up-the-data-directory">Backing Up The Data Directory</h4>

<p><code class="language-plaintext highlighter-rouge">/usr/local/pgsql/data</code> 하위에 있는 파일/디렉토리들을 모두 백업할 것</p>

<p>백업 진행시 아래 파일들은 생략을 권장한다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">pg_wal/</code>: 복구 시 리스크 줄이기 위해</li>
  <li><code class="language-plaintext highlighter-rouge">postmaster.pid</code>, <code class="language-plaintext highlighter-rouge">postmaster.opts</code>: 현재 실행중인 pid 정보이므로 필요 없음</li>
  <li><code class="language-plaintext highlighter-rouge">pg_replslot/</code>: 레플리케이션에 대한 정보를 가지고 있으므로 리스키</li>
  <li><code class="language-plaintext highlighter-rouge">pg_dynshmem/</code>, <code class="language-plaintext highlighter-rouge">pg_notify/</code>, <code class="language-plaintext highlighter-rouge">pg_serial/</code>, <code class="language-plaintext highlighter-rouge">pg_snapshots/</code>, <code class="language-plaintext highlighter-rouge">pg_stat_tmp/</code>, <code class="language-plaintext highlighter-rouge">pg_subtrans/</code>: postmaster 실행시 생성되는 정보이므로 생략 (해당 폴더 자체는 있어야하지만 안에 내용물은 생략)</li>
  <li><code class="language-plaintext highlighter-rouge">pgsql_tmp</code>: postmaster 실행시 삭제되는 임시 정보</li>
  <li><code class="language-plaintext highlighter-rouge">pg_internal.init</code>: 캐시 데이터로 복구됨</li>
</ol>

<hr />
<h2 id="아카이브-백업-복구">아카이브 백업 복구</h2>

<p>아카이브된 파일 (WAL backup, base backup)을 통해 복구하는 방법</p>

<ol>
  <li>서버 중지</li>
  <li>용량이 충분하다면 <code class="language-plaintext highlighter-rouge">data</code> 디렉토리, tablespaces 임시 폴더 복사(복구 실패시 대비), 용량이 충분하지 않다면 <code class="language-plaintext highlighter-rouge">pg_wal/</code> 디렉토리만이라도 백업</li>
  <li><code class="language-plaintext highlighter-rouge">data</code> 하위 디렉토리/파일 모두 제거(tablespaces 존재하면 그것도 삭제)</li>
  <li>기존에 백업한 data 백업 파일 복구
복구시 <code class="language-plaintext highlighter-rouge">root</code> user가 아닌 db user(<code class="language-plaintext highlighter-rouge">postgres</code>)로 permission이 있어야함
테이블스페이스 복구시 <code class="language-plaintext highlighter-rouge">pg_tblspc/</code>의 심볼릭 링크가 생성되었는지 확인</li>
  <li>복구된 <code class="language-plaintext highlighter-rouge">pg_wal/</code> 하위 파일 모두 삭제</li>
  <li>2번에서 복구 전 백업한 <code class="language-plaintext highlighter-rouge">pg_wal/</code> 복구</li>
  <li><code class="language-plaintext highlighter-rouge">data</code> 하위 <code class="language-plaintext highlighter-rouge">recovery.conf</code> 생성
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>restore_command = 'cp /mnt/server/archivedir/%f %p'
recovery_target_time = '2021-07-22 10:53:58'
</code></pre></div>    </div>
    <p><code class="language-plaintext highlighter-rouge">recovery_target_time</code>은 복구 시점(선택)</p>

    <p>필요시 <code class="language-plaintext highlighter-rouge">pg_hba.conf</code> 수정하여 외부 접근 제한</p>
  </li>
  <li>
    <p>서버 시작</p>

    <p>서버가 <code class="language-plaintext highlighter-rouge">recovery.conf</code> 파일을 감지하고 복구 모드에 돌입함</p>

    <p>복구 완료시 <code class="language-plaintext highlighter-rouge">recovery.conf</code>를 <code class="language-plaintext highlighter-rouge">recovery.done</code>으로 파일명 자동 변경</p>
  </li>
  <li>
    <p>복구 완료되었는지 체크</p>

    <p>필요시 <code class="language-plaintext highlighter-rouge">pg_hba.conf</code> 수정하여 사용자 접속 허용</p>
  </li>
</ol>

<p>복구시 사용 가능한 WAL segment들을 사용하므로 마지막에는 <code class="language-plaintext highlighter-rouge">file not found</code> 메세지가 나오는데 이는 정상이다.</p>

<p>복구시 특정 시점으로 복구하고 싶다면 중지점을 지정하면 되는데 <a href="https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET">WAL 설정값 recovery target</a> 참고</p>

<blockquote>
  <p>복구 시점은 base backup이 끝난 시점 이후여야한다. 
base backup 진행 중인 시점으로 지정 불가</p>
</blockquote>

<h3 id="복구-시점-이해">복구 시점 이해</h3>

<table>
  <thead>
    <tr>
      <th>Base Backup Label</th>
      <th>WAL</th>
      <th>복원 가능</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>001</td>
      <td>X</td>
      <td>베이스 백업 없어서 복구 불가</td>
    </tr>
    <tr>
      <td> </td>
      <td>002</td>
      <td>X</td>
      <td>베이스 백업 없어서 복구 불가</td>
    </tr>
    <tr>
      <td> </td>
      <td>003</td>
      <td>X</td>
      <td>베이스 백업 없어서 복구 불가</td>
    </tr>
    <tr>
      <td>basebackup_004</td>
      <td>004</td>
      <td>O</td>
      <td>004 이후 WAL 복원 가능</td>
    </tr>
    <tr>
      <td> </td>
      <td>005</td>
      <td>O</td>
      <td>004 이후 WAL 복원 가능</td>
    </tr>
    <tr>
      <td> </td>
      <td>006</td>
      <td>O</td>
      <td>004 이후 WAL 복원 가능</td>
    </tr>
    <tr>
      <td> </td>
      <td>007</td>
      <td>O</td>
      <td>004 이후 WAL 복원 가능</td>
    </tr>
    <tr>
      <td>basebackup_008</td>
      <td>008</td>
      <td>O</td>
      <td>008 이후 WAL 복원 가능</td>
    </tr>
    <tr>
      <td> </td>
      <td>009</td>
      <td>O</td>
      <td>008 이후 WAL 복원 가능</td>
    </tr>
  </tbody>
</table>

<h3 id="타임라인">타임라인</h3>

<p>어느 시점으로 복구해야할지 모를때 WAL에 타임라인을 지정하여 사용할 수 있음.</p>

<p>WAL은 타임라인 ID에 해당하는 파일명을 추가로 가지고 있어서 서로 충돌이 나지 않는다.</p>

<p>타임라인을 지정하면 복구 시점에 <code class="language-plaintext highlighter-rouge">recovery_target_timeline</code>으로 타임라인을 지정하여 해당 타임라인 시점 복구 가능</p>

<hr />

<h2 id="reference">Reference</h2>

<ol>
  <li><a href="https://www.postgresql.org/docs/14/continuous-archiving.html">Continuous Archiving</a></li>
  <li><a href="https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET">WAL Recovery target</a></li>
</ol>
:ET