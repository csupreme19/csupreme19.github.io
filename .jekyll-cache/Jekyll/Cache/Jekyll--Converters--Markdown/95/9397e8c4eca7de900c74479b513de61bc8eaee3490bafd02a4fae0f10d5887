I"͈<h1 id="spring-core-정리">Spring Core 정리</h1>

<p><img src="/assets/img/titles/spring-logo.svg" alt="spring-logo.svg" /></p>

<p>본 문서에서는 스프링 코어에 대하여 정리해보았다.</p>

<hr />

<h2 id="spring-core">Spring Core</h2>

<p><img src="/assets/img/contents/sf-3.png" alt="sf-3.png" /></p>

<p>Spring의 기본이자 핵심 모듈로 Spring Container, IoC Container이다.</p>

<p>스프링 프레임워크에서 지원하는 IoC, DI 등의 개념의 주체인 Bean을 관리하는 핵심 기능을 담당한다.</p>

<blockquote>
  <p><strong>Spring Bean?</strong></p>

  <p>Spring Framework에서 관리하는 자바 객체로 일반 자바 클래스와 같다고 생각하면 된다.</p>

  <p>Spring에서는 기존의 J2EE의 EJB 방식의 복잡한 구현을 피하기 위하여 POJO를 사용하는데</p>

  <p>해당 POJO가 Spring Container에 의해 생성되고 관리되면 해당 객체는 Bean이라고 한다.</p>
</blockquote>

<p>아래와 같은 4가지 모듈로 구성된다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">spring-core</code>, <code class="language-plaintext highlighter-rouge">spring-beans</code>
    <ul>
      <li>스프링 프레임워크의 핵심 기능 IoC, DI를 지원한다.</li>
      <li>BeanFactory를 구현하여 Bean을 싱글턴 객체로 관리하므로 프로그래밍적으로 객체를 관리할 필요가 없다.</li>
      <li>프로그램 로직/비즈니스 로직과 객체의 생성/관리를 분리하는 핵심 기능</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">spring-context</code>
    <ul>
      <li>위에서 생성한 Bean의 라이프사이클, 스코프인 <code class="language-plaintext highlighter-rouge">ApplicationContext</code>등의 인터페이스를 제공한다.</li>
      <li>스프링 컨테이너에서 관리하는 스프링 빈들을 사용하기 위한 인터페이스이다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">spring-expression</code>
    <ul>
      <li>JSP 명세에 의한 EL(Expression Language)의 확장 기능을 제공한다.</li>
      <li>모델, 빈 객체에 쿼리하고 접근하기 위한 EL로 스프링 컨테이너의 오브젝트와 프로퍼티, 변수, 사칙연산 등을 제공한다.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="개요">개요</h3>

<p>Spring Framework의 핵심 모듈인 Spring Core에 대해서 알아본다.</p>

<p>일반적으로 스프링 프레임워크의 IoC, DI 등의 핵심 기능을 해당 모듈에서 담당한다.</p>

<p>스프링 컨테이너, IoC 컨테이너 그 자체라고 보아도 무방하다.</p>

<hr />

<h3 id="inversion-of-controlioc">Inversion Of Control(IoC)</h3>

<p><strong>제어의 역전; 객체의 생성과 관리를 외부에 맡기는 것</strong></p>

<p><br /></p>

<h4 id="ioc-개념-도입-전">IoC 개념 도입 전</h4>

<div class="mermaid">
  flowchart LR
    A[Application]
    B[Class A]
    A--new Class A--&gt;B
    B-.return Instance A.-&gt;A
</div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// POJO</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nf">Cat</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Constructed!"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="nc">Cat</span> <span class="n">myCat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cat</span><span class="o">();</span>

<span class="c1">// 출력</span>
<span class="nc">Constructed</span><span class="o">!</span>
</code></pre></div></div>

<p>기존 초기 자바 어플리케이션의 경우 위와 같이 개발자가 객체의 생성과 초기화 등의 라이프사이클을 관리해주어야 하였다.</p>

<p>하지만 이런 방식은 생성된 객체(인스컨스)을 여러 클래스에서 사용 및 관리하기가 힘들고 또한 여러개의 중복된 객체가 생성될 가능성이 있다.</p>

<p><br /></p>

<h4 id="ioc-개념-도입-후">IoC 개념 도입 후</h4>

<div class="mermaid">
  flowchart LR
    A[Application]
    B[Spring Container]
    C[XML Configuration]
    D[Bean]
    C--1. Metadata--&gt;B
    B--2. Generate---D
    A--3. getBean--&gt;B
    B-.4. Bean.-&gt;A
</div>

<p><br /></p>

<p><img src="/assets/img/contents/sf-4.png" alt="sf-4.png" /></p>

<p>이를 해결하기 위하여 스프링에서는 모든 객체의 생성과 관리를 Bean으로 등록하여 스프링 컨테이너에게 위임한다. 이를 제어의 역전(Inversion Of Control)이라고 한다.</p>

<p>제어의 역전이라는 특성을 통하여 개발자는 더 이상 객체의 생성과 관리에 대하여 신경쓰지 않고 비즈니스 로직에만 집중하여 생산성을 높일 수 있다.</p>

<p><br /></p>

<h4 id="bean-설정하기xml">Bean 설정하기(XML)</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> 
    <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="nt">&gt;</span>
  
	<span class="c">&lt;!-- 역전 제어 --&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"cat"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Cat"</span> <span class="nt">/&gt;</span>
    
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
<span class="nc">Cat</span> <span class="n">myCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 출력</span>
<span class="nc">Constructed</span><span class="o">!</span>
</code></pre></div></div>

<p>빈은 어플리케이션의 실행과 종료까지의 생명주기를 가지는 ApplicationContext에 등록되어 사용되고 해당 ApplicationContext는 XML 파일, 애너테이션, 자바 코드 등으로 설정할 수 있다.</p>

<p>컨텍스트 생성 시점 Bean들을 주입(생성)하여 초기화하며 컨텍스트에서 <code class="language-plaintext highlighter-rouge">getBean()</code> 호출시 스프링 컨테이너에 객체가 존재하는지 확인하고 객체를 가져온다.</p>

<p>이를 통해 개발자는 더 이상 객체의 생성과  관리에 대해서 걱정할 필요가 없이 싱글턴 객체를 사용할 수 있다.</p>

<hr />

<h3 id="dependency-injectiondi">Dependency Injection(DI)</h3>

<p><strong>의존성 주입; 객체의 의존성을 주입하는 것</strong></p>

<p>스프링 컨테이너에 빈을 등록하여 관리하는데 해당 Bean이 POJO 형태가 아니라 여러 Dependency를 가지고 있으면 어떻게 될까?</p>

<p>모두 알고 있듯이 객체지향 관점에서 대부분의 객체는 의존성을 가지고 있다.</p>

<p>해당 객체는 스프링 컨테이너에서 사용 못하고 개발자가 직접 수동으로 생성해야 할까?</p>

<p>이러한 의존성을 해결하기 위하여 의존성 주입이라는 개념이 등장한다.</p>

<div class="mermaid">
  flowchart LR
    A[Application]
    B[Spring Container]
    C[XML Configuration]
    D[Cat Bean]
    E[Eye Bean]
    C--1. Metadata--&gt;B
    B--2. Generate---E
    B--2. Generate---D
    E--3. Dependency Inject--&gt;D
    A--4. getBean--&gt;B
    B-.5. Bean.-&gt;A
</div>

<ol>
  <li>초기 스프링 컨테이너 구동시 스프링 컨테이너에 의해 모든 Bean이 생성된다.</li>
  <li>이후 DI를 통해 의존성을 주입하여 의존성이 주입된 Bean이 준비된다.</li>
  <li>스프링 컨테이너에서 getBean을 통하여 사용하는 모든 Bean은 DI가 완료된 빈이다.</li>
</ol>

<p><br /></p>

<h4 id="constructor-dependency-injection-예시">Constructor Dependency Injection 예시</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"eye"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Eye"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"cat"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Cat"</span><span class="nt">&gt;</span>
	<span class="c">&lt;!-- 의존성 주입 --&gt;</span>
	<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"eye"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">gender</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nc">Eye</span> <span class="n">eye</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Cat</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Constructed!"</span><span class="o">);</span>
  <span class="o">}</span>
	
	<span class="kd">public</span> <span class="nf">Cat</span><span class="o">(</span><span class="nc">Eye</span> <span class="n">eye</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Constructed!"</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">eye</span><span class="o">=</span><span class="n">eye</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="nc">Cat</span> <span class="n">myCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myCat</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myCat</span><span class="o">.</span><span class="na">eye</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</code></pre></div></div>

<p>Cat에 Eye라는 dependency를 추가하였다.</p>

<p>스프링의 DI를 사용하려면 해당 Eye 또한 Bean으로 등록되어 있어야 이후 DI 시점에 주입이 될 수 있다.</p>

<hr />

<h3 id="bean-scope">Bean Scope</h3>

<h4 id="singleton">Singleton</h4>

<div class="mermaid">
  flowchart LR
    A[Class B]
    B[Class C]
    C[Class D]
    D[Spring Container]
    F[Instance A]
    A--getBean--&gt;D
    B--getBean--&gt;D
    C--getBean--&gt;D
    D&lt;-.manage.-&gt;F
</div>

<p>스프링 컨테이너는 기본적으로 단일 빈 정의에 대해서 단 하나의 빈 객체(인스턴스)만을 관리한다.</p>

<p>이는 GoF 디자인 패턴의 싱글톤 패턴에 해당하며 컨텍스트에서 단일 인스턴스만을 참조하여 객체의 중복생성을 피하고 관리를 쉽게 해준다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 두 가지는 서로 동일(기본 스코프는 싱글톤) --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"eye"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Eye"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"eye"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Eye"</span> <span class="na">scope=</span><span class="s">"singleton"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
<span class="nc">Cat</span> <span class="n">myCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Cat</span> <span class="n">yourCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myCat</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">yourCat</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>

<span class="c1">// 서로 같은 메모리를 참조하는 동일 인스턴스임을 확인</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Cat</span><span class="err">@</span><span class="mi">1</span><span class="n">ed4ae0f</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Cat</span><span class="err">@</span><span class="mi">1</span><span class="n">ed4ae0f</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="prototype">Prototype</h4>

<div class="mermaid">
  flowchart LR
    A[Class B]
    B[Class C]
    C[Class D]
    subgraph Spring Container
    D[Spring Container]
    I[Spring Container]
    J[Spring Container]
    end
    F[Instance A]
    G[Instance A']
    H[Instance A'']
    A--getBean--&gt;D
    B--getBean--&gt;I
    C--getBean--&gt;J
    D&lt;-.manage.-&gt;F
    I&lt;-.manage.-&gt;G
    J&lt;-.manage.-&gt;H
</div>

<p>스프링에서는 또다른 빈 스코프가 있는데 Prototype 스코프이다.</p>

<p>각 스코프별로 컨테이너에 객체가 참조될 때마다 새로운 인스턴스가 생성된다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"eye"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.Eye"</span> <span class="na">scope=</span><span class="s">"prototype"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cat</span> <span class="n">myCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Cat</span> <span class="n">yourCat</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cat"</span><span class="o">,</span> <span class="nc">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myCat</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">yourCat</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myCat</span><span class="o">.</span><span class="na">eye</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">yourCat</span><span class="o">.</span><span class="na">eye</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>

<span class="c1">// 서로 다른 인스턴스임을 확인</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Cat</span><span class="err">@</span><span class="mi">1</span><span class="n">ed4ae0f</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Cat</span><span class="err">@</span><span class="mi">54</span><span class="n">c5a2ff</span>
<span class="c1">// 하지만 주입된 singleton 빈은 같은 인스턴스임을 확인할 수 있다.</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Eye</span><span class="err">@</span><span class="mi">6</span><span class="n">d4d66d2</span>
<span class="n">com</span><span class="o">.</span><span class="na">csupreme19</span><span class="o">.</span><span class="na">springdemo</span><span class="o">.</span><span class="na">Eye</span><span class="err">@</span><span class="mi">6</span><span class="n">d4d66d2</span>
</code></pre></div></div>

<blockquote>
  <p><strong>주의사항</strong></p>

  <p>Prototype 스코프 빈의 경우 스프링 컨테이너에서 라이프사이클을 보장하지 않는다.</p>
</blockquote>

<p>singleton, prototype 이외에도 request, session, global-session 등의 스코프가 존재한다.</p>

<p><br /></p>

<h3 id="bean-lifecycle">Bean Lifecycle</h3>

<div class="mermaid">
  sequenceDiagram
    participant A as Container Start
    participant B as Bean Instantiate
    participant C as Dependencies Inject
    participant D as Internal Spring Process
    participant E as Init Method
    participant F as Destroy Method
    participant G as Bean Destroy
  A-&gt;&gt;B: Instantiate beans
B-&gt;&gt;C: Inject dependencies
C-&gt;&gt;D: Bean factory
D-&gt;&gt;E: Custom initialization
loop until container stop
E-&gt;F: Beans ready to use
end
F-&gt;&gt;G: Custom destruction
</div>

<p>Bean은 다음과 같은 생명주기를 갖는다.</p>

<ol>
  <li>스프링 컨테이너 시작
    <ul>
      <li>어플리케이션이 시작되면 스프링 컨테이너도 함께 시작한다.</li>
    </ul>
  </li>
  <li>메타데이터에 의해 설정된 빈들을 생성한다.
    <ul>
      <li>XML 설정, @ComponentScan 등에 의해 설정된 메타데이터를 기반으로 Bean을 스프링 컨테이너에 생성한다.</li>
    </ul>
  </li>
  <li>해당 빈에 대한 의존성을 주입한다.
    <ul>
      <li>생성된 Bean들을 의존성으로 가지고 있는 빈에 의존성을 주입한다.</li>
    </ul>
  </li>
  <li>내부 프로세스 진행
    <ul>
      <li>빈 팩토리와 같은 post-processor를 실행한다.</li>
    </ul>
  </li>
  <li>init method 실행
    <ul>
      <li>해당 Bean에 설정된 init method를 실행한다.</li>
    </ul>
  </li>
  <li>스프링 컨테이너 중지
    <ul>
      <li>어플리케이션이 중지되면 스프링 컨테이너도 함께 중지된다.</li>
    </ul>
  </li>
  <li>destroy method 실행
    <ul>
      <li>해당 Bean에 설정된 destroy method를 실행한다.</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h4 id="생명주기-확인">생명주기 확인</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"testBean"</span> <span class="na">class=</span><span class="s">"com.csupreme19.springdemo.TestBean"</span> <span class="na">init-method=</span><span class="s">"printInit"</span> <span class="na">destroy-method=</span><span class="s">"printDestroy"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestBean</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="nf">TestBean</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Constructed!"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printInit</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Init bean!"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printDestroy</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Destroy bean!"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"applicationContext.xml"</span><span class="o">);</span>
<span class="nc">TestBean</span> <span class="n">testBean</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"testBean"</span><span class="o">,</span> <span class="nc">TestBean</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Closing Application Context!"</span><span class="o">);</span>
<span class="o">((</span><span class="nc">AbstractApplicationContext</span><span class="o">)</span> <span class="n">ctx</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Closed Application Context!"</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class com.csupreme19.springdemo.TestBean Constructed!
class com.csupreme19.springdemo.TestBean Init bean!
com.csupreme19.springdemo.TestBean@54e1c68b
Closing Application Context!
class com.csupreme19.springdemo.TestBean Destroy bean!
Closed Application Context!
</code></pre></div></div>

<p>생성자 -&gt; Bean 초기화 메서드 -&gt; 빈 확인 -&gt; 컨테이너 종료시 빈 종료 확인</p>

<p><br /></p>

<h3 id="spring-context-with-annotation">Spring Context with Annotation</h3>

<p>위의 applciation context xml 파일을 사용하지 않고 Annotation을 이용하여 스프링 컨테이너를 설정해보자.</p>

<p>들어가기 전에 혼동이 올 수 있는 애너테이션을 확실히 정리하고 가자.</p>

<h4 id="component-vs-bean">@Component vs @Bean</h4>

<p>개발자가 직접 생성한 클래스를 빈의 형태로 등록하여 사용하고자 하는 경우 <code class="language-plaintext highlighter-rouge">@Component</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDAO</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>@Component 애너테이션은 타겟이 클래스로 정해져있어 애초에 메서드 형태로 선언이 불가능하다.</p>
</blockquote>

<p>외부 라이브러리에서 생성되어 스프링 컨테이너에 빈 형태로 등록하여 사용하고자 하는 경우 <code class="language-plaintext highlighter-rouge">@Bean</code>을 주로 사용한다.</p>

<p>직접 생성한 클래스를 Bean으로 등록하여 사용할 수는 있으나 클래스 레벨에서 설정이 불가능 하기 때문에 일반적으로는 위와 같이 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConfig</span> <span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">ExternalUser</span> <span class="nf">externalUser</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ExternalUser</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">@Bean</code> 애너테이션은 타겟이 메서드로 지정되어 있어 애초에 클래스에 설정이 불가능하다.</p>
</blockquote>

<h4 id="1-appconfig-작성">1. AppConfig 작성</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"com.csupreme19.springdemo"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ApplicationContext 생성시 사용할 Configuration을 작성한다.</p>

<p><code class="language-plaintext highlighter-rouge">@Configuration</code>: 해당 클래스가 여러개의  <code class="language-plaintext highlighter-rouge">@Bean</code>을 가지고 있을때 설정한다. 현재 빈이 존재하지 않으나 추후 설정시 사용하기 때문에 <code class="language-plaintext highlighter-rouge">@Configuration</code> 사용</p>

<p><code class="language-plaintext highlighter-rouge">@ComponentScan(basePackage)</code>: 스프링에 주입되는 빈(컴포넌트)들을 스캔할 베이스 패키지를 설정한다. 해당 패키지 안에 있는 <code class="language-plaintext highlighter-rouge">@Component</code>로 설정된 클래스들은 스프링 컨테이너 생성시 스프링 컨테이너에 의해 생성 및 의존성 주입된다.</p>

<h4 id="2-component-작성">2. Component 작성</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDAO</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스프링 컨테이너에 등록되는 컴포넌트(빈)을 작성한다.</p>

<h4 id="3-스프링-컨텍스트-생성">3. 스프링 컨텍스트 생성</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="nc">UserDAO</span> <span class="n">userDAO</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"userDAO"</span><span class="o">,</span> <span class="nc">UserDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="o">((</span><span class="nc">AbstractApplicationContext</span><span class="o">)</span><span class="n">ctx</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에서 설정한 AppConfig를 기반으로  <code class="language-plaintext highlighter-rouge">AnnotationConfigApplicationContext</code>를 생성한다.</p>

<p>해당 컨텍스트에서 빈을 가져와 사용한다.</p>

<hr />

<h2 id="reference">Reference</h2>

<ol>
  <li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview">docs.spring.io overview</a></li>
  <li><a href="https://docs.spring.io/spring-framework/docs/5.0.0.M5/spring-framework-reference/html/overview.html">docs.spring.io 5.0.0 overview</a></li>
  <li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">docs.spring.io spring-core</a></li>
  <li><a href="https://www.udemy.com/course/spring-hibernate-tutorial/">Udemy Spring &amp; Hibernate for Beginners</a></li>
  <li><a href="http://www.yes24.com/Product/Goods/59192207">스프링 철저 입문</a></li>
</ol>

:ET